{
    "@chainlink/contracts-0.0.3/src/v0.5/dev/AggregatorInterface.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "AggregatorInterface"
            }
        ],
        "functions": [
            {
                "name": "latestAnswer",
                "signature": "latestAnswer() external",
                "returns": "(int256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 4
            },
            {
                "name": "latestTimestamp",
                "signature": "latestTimestamp() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "latestRound",
                "signature": "latestRound() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 6
            },
            {
                "name": "getAnswer",
                "signature": "getAnswer(uint256 roundId) external",
                "returns": "(int256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "getTimestamp",
                "signature": "getTimestamp(uint256 roundId) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 8
            }
        ],
        "events": [
            {
                "name": "AnswerUpdated",
                "parameters": "(int256 current, uint256 roundId, uint256 timestamp)",
                "lineNumber": 10
            },
            {
                "name": "NewRound",
                "parameters": "(uint256 roundId, address startedBy)",
                "lineNumber": 11
            }
        ]
    },
    "contracts/AddressResolver.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "AddressResolver"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 10
            },
            {
                "name": "importAddresses",
                "signature": "importAddresses(bytes32[] names, address[] destinations) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 14
            },
            {
                "name": "getAddress",
                "signature": "getAddress(bytes32 name) public",
                "returns": "(address)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 24
            },
            {
                "name": "requireAndGetAddress",
                "signature": "requireAndGetAddress(bytes32 name, string reason) public",
                "returns": "(address)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 28
            }
        ],
        "variables": [
            {
                "name": "repository",
                "type": "mapping(bytes32 => address)",
                "lineNumber": 8,
                "visibility": "public"
            }
        ]
    },
    "contracts/DelegateApprovals.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "DelegateApprovals"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, contract EternalStorage _eternalStorage) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 26
            },
            {
                "name": "_getKey",
                "signature": "_getKey(bytes32 _action, address _authoriser, address _delegate) internal",
                "returns": "(bytes32)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 35
            },
            {
                "name": "canBurnFor",
                "signature": "canBurnFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 44
            },
            {
                "name": "canIssueFor",
                "signature": "canIssueFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 48
            },
            {
                "name": "canClaimFor",
                "signature": "canClaimFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 52
            },
            {
                "name": "canExchangeFor",
                "signature": "canExchangeFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 56
            },
            {
                "name": "approvedAll",
                "signature": "approvedAll(address authoriser, address delegate) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 60
            },
            {
                "name": "_checkApproval",
                "signature": "_checkApproval(bytes32 action, address authoriser, address delegate) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 67
            },
            {
                "name": "approveAllDelegatePowers",
                "signature": "approveAllDelegatePowers(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 80
            },
            {
                "name": "removeAllDelegatePowers",
                "signature": "removeAllDelegatePowers(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 85
            },
            {
                "name": "approveBurnOnBehalf",
                "signature": "approveBurnOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 92
            },
            {
                "name": "removeBurnOnBehalf",
                "signature": "removeBurnOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 96
            },
            {
                "name": "approveIssueOnBehalf",
                "signature": "approveIssueOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 101
            },
            {
                "name": "removeIssueOnBehalf",
                "signature": "removeIssueOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 105
            },
            {
                "name": "approveClaimOnBehalf",
                "signature": "approveClaimOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 110
            },
            {
                "name": "removeClaimOnBehalf",
                "signature": "removeClaimOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 114
            },
            {
                "name": "approveExchangeOnBehalf",
                "signature": "approveExchangeOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 119
            },
            {
                "name": "removeExchangeOnBehalf",
                "signature": "removeExchangeOnBehalf(address delegate) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 123
            },
            {
                "name": "_setApproval",
                "signature": "_setApproval(bytes32 action, address authoriser, address delegate) internal",
                "returns": "()",
                "events": [
                    "Approval"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 127
            },
            {
                "name": "_withdrawApproval",
                "signature": "_withdrawApproval(bytes32 action, address authoriser, address delegate) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 137
            },
            {
                "name": "setEternalStorage",
                "signature": "setEternalStorage(contract EternalStorage _eternalStorage) external",
                "returns": "()",
                "events": [
                    "EternalStorageUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 149
            }
        ],
        "events": [
            {
                "name": "Approval",
                "parameters": "(address authoriser, address delegate, bytes32 action)",
                "lineNumber": 156
            },
            {
                "name": "WithdrawApproval",
                "parameters": "(address authoriser, address delegate, bytes32 action)",
                "lineNumber": 157
            },
            {
                "name": "EternalStorageUpdated",
                "parameters": "(address newEternalStorage)",
                "lineNumber": 158
            }
        ],
        "variables": [
            {
                "name": "BURN_FOR_ADDRESS",
                "type": "bytes32",
                "lineNumber": 9,
                "visibility": "public"
            },
            {
                "name": "ISSUE_FOR_ADDRESS",
                "type": "bytes32",
                "lineNumber": 10,
                "visibility": "public"
            },
            {
                "name": "CLAIM_FOR_ADDRESS",
                "type": "bytes32",
                "lineNumber": 11,
                "visibility": "public"
            },
            {
                "name": "EXCHANGE_FOR_ADDRESS",
                "type": "bytes32",
                "lineNumber": 12,
                "visibility": "public"
            },
            {
                "name": "APPROVE_ALL",
                "type": "bytes32",
                "lineNumber": 13,
                "visibility": "public"
            },
            {
                "name": "_delegatableFunctions",
                "type": "bytes32[5]",
                "lineNumber": 15,
                "visibility": "private"
            },
            {
                "name": "eternalStorage",
                "type": "contract EternalStorage",
                "lineNumber": 24,
                "visibility": "public"
            }
        ]
    },
    "contracts/Depot.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Depot"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address payable _fundsWallet, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible",
                    "Pausable",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 80
            },
            {
                "name": "setMaxEthPurchase",
                "signature": "setMaxEthPurchase(uint256 _maxEthPurchase) external",
                "returns": "()",
                "events": [
                    "MaxEthPurchaseUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 90
            },
            {
                "name": "setFundsWallet",
                "signature": "setFundsWallet(address payable _fundsWallet) external",
                "returns": "()",
                "events": [
                    "FundsWalletUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the funds wallet where ETH raised is held\n@param _fundsWallet The new address to forward ETH and Synths to",
                "visibility": "external",
                "lineNumber": 99
            },
            {
                "name": "setMinimumDepositAmount",
                "signature": "setMinimumDepositAmount(uint256 _amount) external",
                "returns": "()",
                "events": [
                    "MinimumDepositAmountUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the minimum deposit amount required to depoist sUSD into the FIFO queue\n@param _amount The new new minimum number of sUSD required to deposit",
                "visibility": "external",
                "lineNumber": 108
            },
            {
                "name": "fallback",
                "signature": "() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Fallback function (exchanges ETH to sUSD)",
                "visibility": "external",
                "lineNumber": 120
            },
            {
                "name": "exchangeEtherForSynths",
                "signature": "exchangeEtherForSynths() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "nonReentrant",
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange ETH to sUSD.",
                "visibility": "public",
                "lineNumber": 128
            },
            {
                "name": "exchangeEtherForSynthsAtRate",
                "signature": "exchangeEtherForSynthsAtRate(uint256 guaranteedRate) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange ETH to sUSD while insisting on a particular rate. This allows a user to\n        exchange while protecting against frontrunning by the contract owner on the exchange rate.\n@param guaranteedRate The exchange rate (ether price) which must be honored or the call will revert.",
                "visibility": "public",
                "lineNumber": 255
            },
            {
                "name": "exchangeEtherForSNX",
                "signature": "exchangeEtherForSNX() public",
                "returns": "(uint256)",
                "events": [
                    "Exchange"
                ],
                "modifiers": [
                    "rateNotStale",
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange ETH to SNX.",
                "visibility": "public",
                "lineNumber": 272
            },
            {
                "name": "exchangeEtherForSNXAtRate",
                "signature": "exchangeEtherForSNXAtRate(uint256 guaranteedEtherRate, uint256 guaranteedSynthetixRate) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale",
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange ETH to SNX while insisting on a particular set of rates. This allows a user to\n        exchange while protecting against frontrunning by the contract owner on the exchange rates.\n@param guaranteedEtherRate The ether exchange rate which must be honored or the call will revert.\n@param guaranteedSynthetixRate The synthetix exchange rate which must be honored or the call will revert.",
                "visibility": "public",
                "lineNumber": 302
            },
            {
                "name": "exchangeSynthsForSNX",
                "signature": "exchangeSynthsForSNX(uint256 synthAmount) public",
                "returns": "(uint256)",
                "events": [
                    "Exchange"
                ],
                "modifiers": [
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange sUSD for SNX\n@param synthAmount The amount of synths the user wishes to exchange.",
                "visibility": "public",
                "lineNumber": 325
            },
            {
                "name": "exchangeSynthsForSNXAtRate",
                "signature": "exchangeSynthsForSNXAtRate(uint256 synthAmount, uint256 guaranteedRate) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale",
                    "notPaused"
                ],
                "documentation": "@notice Exchange sUSD for SNX while insisting on a particular rate. This allows a user to\n        exchange while protecting against frontrunning by the contract owner on the exchange rate.\n@param synthAmount The amount of synths the user wishes to exchange.\n@param guaranteedRate A rate (synthetix price) the caller wishes to insist upon.",
                "visibility": "public",
                "lineNumber": 355
            },
            {
                "name": "withdrawSynthetix",
                "signature": "withdrawSynthetix(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Allows the owner to withdraw SNX from this contract if needed.\n@param amount The amount of SNX to attempt to withdraw (in 18 decimal places).",
                "visibility": "external",
                "lineNumber": 372
            },
            {
                "name": "withdrawMyDepositedSynths",
                "signature": "withdrawMyDepositedSynths() external",
                "returns": "()",
                "events": [
                    "SynthWithdrawal"
                ],
                "modifiers": [],
                "documentation": "@notice Allows a user to withdraw all of their previously deposited synths from this contract if needed.\n        Developer note: We could keep an index of address to deposits to make this operation more efficient\n        but then all the other operations on the queue become less efficient. It's expected that this\n        function will be very rarely used, so placing the inefficiency here is intentional. The usual\n        use case does not involve a withdrawal.",
                "visibility": "external",
                "lineNumber": 388
            },
            {
                "name": "depositSynths",
                "signature": "depositSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice depositSynths: Allows users to deposit synths via the approve / transferFrom workflow\n@param amount The amount of sUSD you wish to deposit (must have been approved first)",
                "visibility": "external",
                "lineNumber": 425
            },
            {
                "name": "synthetixReceivedForSynths",
                "signature": "synthetixReceivedForSynths(uint256 amount) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculate how many SNX you will receive if you transfer\n        an amount of synths.\n@param amount The amount of synths (in 18 decimal places) you want to ask about",
                "visibility": "public",
                "lineNumber": 457
            },
            {
                "name": "synthetixReceivedForEther",
                "signature": "synthetixReceivedForEther(uint256 amount) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculate how many SNX you will receive if you transfer\n        an amount of ether.\n@param amount The amount of ether (in wei) you want to ask about",
                "visibility": "public",
                "lineNumber": 467
            },
            {
                "name": "synthsReceivedForEther",
                "signature": "synthsReceivedForEther(uint256 amount) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculate how many synths you will receive if you transfer\n        an amount of ether.\n@param amount The amount of ether (in wei) you want to ask about",
                "visibility": "public",
                "lineNumber": 480
            },
            {
                "name": "synthsUSD",
                "signature": "synthsUSD() internal",
                "returns": "(contract ISynth)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 487
            },
            {
                "name": "synthetix",
                "signature": "synthetix() internal",
                "returns": "(contract IERC20)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 491
            },
            {
                "name": "exchangeRates",
                "signature": "exchangeRates() internal",
                "returns": "(contract IExchangeRates)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 495
            }
        ],
        "events": [
            {
                "name": "MaxEthPurchaseUpdated",
                "parameters": "(uint256 amount)",
                "lineNumber": 508
            },
            {
                "name": "FundsWalletUpdated",
                "parameters": "(address newFundsWallet)",
                "lineNumber": 509
            },
            {
                "name": "Exchange",
                "parameters": "(string fromCurrency, uint256 fromAmount, string toCurrency, uint256 toAmount)",
                "lineNumber": 510
            },
            {
                "name": "SynthWithdrawal",
                "parameters": "(address user, uint256 amount)",
                "lineNumber": 511
            },
            {
                "name": "SynthDeposit",
                "parameters": "(address user, uint256 amount, uint256 depositIndex)",
                "lineNumber": 512
            },
            {
                "name": "SynthDepositRemoved",
                "parameters": "(address user, uint256 amount, uint256 depositIndex)",
                "lineNumber": 513
            },
            {
                "name": "SynthDepositNotAccepted",
                "parameters": "(address user, uint256 amount, uint256 minimum)",
                "lineNumber": 514
            },
            {
                "name": "MinimumDepositAmountUpdated",
                "parameters": "(uint256 amount)",
                "lineNumber": 515
            },
            {
                "name": "NonPayableContract",
                "parameters": "(address receiver, uint256 amount)",
                "lineNumber": 516
            },
            {
                "name": "ClearedDeposit",
                "parameters": "(address fromAddress, address toAddress, uint256 fromETHAmount, uint256 toAmount, uint256 depositIndex)",
                "lineNumber": 517
            }
        ],
        "variables": [
            {
                "name": "SNX",
                "type": "bytes32",
                "lineNumber": 19,
                "visibility": "internal"
            },
            {
                "name": "ETH",
                "type": "bytes32",
                "lineNumber": 20,
                "visibility": "internal"
            },
            {
                "name": "fundsWallet",
                "type": "address payable",
                "lineNumber": 27,
                "visibility": "public"
            },
            {
                "name": "deposits",
                "type": "mapping(uint256 => struct Depot.SynthDepositEntry)",
                "lineNumber": 48,
                "visibility": "public"
            },
            {
                "name": "depositStartIndex",
                "type": "uint256",
                "lineNumber": 50,
                "visibility": "public"
            },
            {
                "name": "depositEndIndex",
                "type": "uint256",
                "lineNumber": 52,
                "visibility": "public"
            },
            {
                "name": "totalSellableDeposits",
                "type": "uint256",
                "lineNumber": 57,
                "visibility": "public"
            },
            {
                "name": "minimumDepositAmount",
                "type": "uint256",
                "lineNumber": 60,
                "visibility": "public"
            },
            {
                "name": "maxEthPurchase",
                "type": "uint256",
                "lineNumber": 63,
                "visibility": "public"
            },
            {
                "name": "smallDeposits",
                "type": "mapping(address => uint256)",
                "lineNumber": 68,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYNTHSUSD",
                "type": "bytes32",
                "lineNumber": 72,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXRATES",
                "type": "bytes32",
                "lineNumber": 73,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIX",
                "type": "bytes32",
                "lineNumber": 74,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 76,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "rateNotStale",
                "parameters": "(bytes32 currencyKey)",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 501
            }
        ],
        "structs": [
            {
                "name": "SynthDepositEntry",
                "members": [
                    {
                        "name": "user",
                        "type": "address payable"
                    },
                    {
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 30
            }
        ]
    },
    "contracts/EscrowChecker.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SynthetixEscrow"
            },
            {
                "documentation": null,
                "contractName": "EscrowChecker"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(contract SynthetixEscrow _esc) public",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 15
            },
            {
                "name": "checkAccountSchedule",
                "signature": "checkAccountSchedule(address account) public",
                "returns": "(uint256[16])",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 19
            }
        ],
        "variables": [
            {
                "name": "synthetix_escrow",
                "type": "contract SynthetixEscrow",
                "lineNumber": 13,
                "visibility": "public"
            }
        ]
    },
    "contracts/EternalStorage.sol": {
        "metadata": [
            {
                "documentation": "@notice  This contract is based on the code available from this blog\nhttps://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88/\nImplements support for storing a keccak256 key and value pairs. It is the more flexible\nand extensible option. This ensures data schema changes can be implemented without\nrequiring upgrades to the storage contract.",
                "contractName": "EternalStorage"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _associatedContract) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "State"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 16
            },
            {
                "name": "getUIntValue",
                "signature": "getUIntValue(bytes32 record) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 28
            },
            {
                "name": "setUIntValue",
                "signature": "setUIntValue(bytes32 record, uint256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 32
            },
            {
                "name": "deleteUIntValue",
                "signature": "deleteUIntValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 36
            },
            {
                "name": "getStringValue",
                "signature": "getStringValue(bytes32 record) external",
                "returns": "(string)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 41
            },
            {
                "name": "setStringValue",
                "signature": "setStringValue(bytes32 record, string value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 45
            },
            {
                "name": "deleteStringValue",
                "signature": "deleteStringValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 49
            },
            {
                "name": "getAddressValue",
                "signature": "getAddressValue(bytes32 record) external",
                "returns": "(address)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 54
            },
            {
                "name": "setAddressValue",
                "signature": "setAddressValue(bytes32 record, address value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 58
            },
            {
                "name": "deleteAddressValue",
                "signature": "deleteAddressValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 62
            },
            {
                "name": "getBytesValue",
                "signature": "getBytesValue(bytes32 record) external",
                "returns": "(bytes)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 67
            },
            {
                "name": "setBytesValue",
                "signature": "setBytesValue(bytes32 record, bytes value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 71
            },
            {
                "name": "deleteBytesValue",
                "signature": "deleteBytesValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 75
            },
            {
                "name": "getBytes32Value",
                "signature": "getBytes32Value(bytes32 record) external",
                "returns": "(bytes32)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 80
            },
            {
                "name": "setBytes32Value",
                "signature": "setBytes32Value(bytes32 record, bytes32 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 84
            },
            {
                "name": "deleteBytes32Value",
                "signature": "deleteBytes32Value(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 88
            },
            {
                "name": "getBooleanValue",
                "signature": "getBooleanValue(bytes32 record) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 93
            },
            {
                "name": "setBooleanValue",
                "signature": "setBooleanValue(bytes32 record, bool value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 97
            },
            {
                "name": "deleteBooleanValue",
                "signature": "deleteBooleanValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 101
            },
            {
                "name": "getIntValue",
                "signature": "getIntValue(bytes32 record) external",
                "returns": "(int256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 106
            },
            {
                "name": "setIntValue",
                "signature": "setIntValue(bytes32 record, int256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 110
            },
            {
                "name": "deleteIntValue",
                "signature": "deleteIntValue(bytes32 record) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 114
            }
        ],
        "variables": [
            {
                "name": "UIntStorage",
                "type": "mapping(bytes32 => uint256)",
                "lineNumber": 19,
                "visibility": "internal"
            },
            {
                "name": "StringStorage",
                "type": "mapping(bytes32 => string)",
                "lineNumber": 20,
                "visibility": "internal"
            },
            {
                "name": "AddressStorage",
                "type": "mapping(bytes32 => address)",
                "lineNumber": 21,
                "visibility": "internal"
            },
            {
                "name": "BytesStorage",
                "type": "mapping(bytes32 => bytes)",
                "lineNumber": 22,
                "visibility": "internal"
            },
            {
                "name": "Bytes32Storage",
                "type": "mapping(bytes32 => bytes32)",
                "lineNumber": 23,
                "visibility": "internal"
            },
            {
                "name": "BooleanStorage",
                "type": "mapping(bytes32 => bool)",
                "lineNumber": 24,
                "visibility": "internal"
            },
            {
                "name": "IntStorage",
                "type": "mapping(bytes32 => int256)",
                "lineNumber": 25,
                "visibility": "internal"
            }
        ]
    },
    "contracts/EtherCollateral.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "EtherCollateral"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "Pausable",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 99
            },
            {
                "name": "setCollateralizationRatio",
                "signature": "setCollateralizationRatio(uint256 ratio) external",
                "returns": "()",
                "events": [
                    "CollateralizationRatioUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 110
            },
            {
                "name": "setInterestRate",
                "signature": "setInterestRate(uint256 _interestRate) external",
                "returns": "()",
                "events": [
                    "InterestRateUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 117
            },
            {
                "name": "setIssueFeeRate",
                "signature": "setIssueFeeRate(uint256 _issueFeeRate) external",
                "returns": "()",
                "events": [
                    "IssueFeeRateUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 125
            },
            {
                "name": "setIssueLimit",
                "signature": "setIssueLimit(uint256 _issueLimit) external",
                "returns": "()",
                "events": [
                    "IssueLimitUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 130
            },
            {
                "name": "setMinLoanSize",
                "signature": "setMinLoanSize(uint256 _minLoanSize) external",
                "returns": "()",
                "events": [
                    "MinLoanSizeUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 135
            },
            {
                "name": "setAccountLoanLimit",
                "signature": "setAccountLoanLimit(uint256 _loanLimit) external",
                "returns": "()",
                "events": [
                    "AccountLoanLimitUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 140
            },
            {
                "name": "setLoanLiquidationOpen",
                "signature": "setLoanLiquidationOpen(bool _loanLiquidationOpen) external",
                "returns": "()",
                "events": [
                    "LoanLiquidationOpenUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 147
            },
            {
                "name": "getContractInfo",
                "signature": "getContractInfo() external",
                "returns": "(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 155
            },
            {
                "name": "issuanceRatio",
                "signature": "issuanceRatio() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 192
            },
            {
                "name": "loanAmountFromCollateral",
                "signature": "loanAmountFromCollateral(uint256 collateralAmount) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 198
            },
            {
                "name": "collateralAmountForLoan",
                "signature": "collateralAmountForLoan(uint256 loanAmount) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 202
            },
            {
                "name": "currentInterestOnLoan",
                "signature": "currentInterestOnLoan(address _account, uint256 _loanID) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 206
            },
            {
                "name": "accruedInterestOnLoan",
                "signature": "accruedInterestOnLoan(uint256 _loanAmount, uint256 _seconds) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 213
            },
            {
                "name": "calculateMintingFee",
                "signature": "calculateMintingFee(address _account, uint256 _loanID) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 219
            },
            {
                "name": "openLoanIDsByAccount",
                "signature": "openLoanIDsByAccount(address _account) external",
                "returns": "(uint256[])",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 225
            },
            {
                "name": "getLoan",
                "signature": "getLoan(address _account, uint256 _loanID) external",
                "returns": "(address, uint256, uint256, uint256, uint256, uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 248
            },
            {
                "name": "loanLifeSpan",
                "signature": "loanLifeSpan(address _account, uint256 _loanID) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 273
            },
            {
                "name": "openLoan",
                "signature": "openLoan() external",
                "returns": "(uint256)",
                "events": [
                    "LoanCreated"
                ],
                "modifiers": [
                    "notPaused",
                    "nonReentrant"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 280
            },
            {
                "name": "closeLoan",
                "signature": "closeLoan(uint256 loanID) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "nonReentrant"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 324
            },
            {
                "name": "liquidateUnclosedLoan",
                "signature": "liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external",
                "returns": "()",
                "events": [
                    "LoanLiquidated"
                ],
                "modifiers": [
                    "nonReentrant"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 329
            },
            {
                "name": "_closeLoan",
                "signature": "_closeLoan(address account, uint256 loanID) private",
                "returns": "()",
                "events": [
                    "LoanClosed"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 339
            },
            {
                "name": "_getLoanFromStorage",
                "signature": "_getLoanFromStorage(address account, uint256 loanID) private",
                "returns": "(struct EtherCollateral.SynthLoanStruct)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 383
            },
            {
                "name": "_recordLoanClosure",
                "signature": "_recordLoanClosure(struct EtherCollateral.SynthLoanStruct synthLoan) private",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 392
            },
            {
                "name": "_incrementTotalLoansCounter",
                "signature": "_incrementTotalLoansCounter() private",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 406
            },
            {
                "name": "_calculateMintingFee",
                "signature": "_calculateMintingFee(struct EtherCollateral.SynthLoanStruct synthLoan) private",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 415
            },
            {
                "name": "_loanLifeSpan",
                "signature": "_loanLifeSpan(struct EtherCollateral.SynthLoanStruct synthLoan) private",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "private",
                "lineNumber": 419
            },
            {
                "name": "systemStatus",
                "signature": "systemStatus() internal",
                "returns": "(contract ISystemStatus)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 428
            },
            {
                "name": "synthsETH",
                "signature": "synthsETH() internal",
                "returns": "(contract ISynth)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 432
            },
            {
                "name": "synthsUSD",
                "signature": "synthsUSD() internal",
                "returns": "(contract ISynth)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 436
            },
            {
                "name": "depot",
                "signature": "depot() internal",
                "returns": "(contract IDepot)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 440
            }
        ],
        "events": [
            {
                "name": "CollateralizationRatioUpdated",
                "parameters": "(uint256 ratio)",
                "lineNumber": 446
            },
            {
                "name": "InterestRateUpdated",
                "parameters": "(uint256 interestRate)",
                "lineNumber": 447
            },
            {
                "name": "IssueFeeRateUpdated",
                "parameters": "(uint256 issueFeeRate)",
                "lineNumber": 448
            },
            {
                "name": "IssueLimitUpdated",
                "parameters": "(uint256 issueLimit)",
                "lineNumber": 449
            },
            {
                "name": "MinLoanSizeUpdated",
                "parameters": "(uint256 minLoanSize)",
                "lineNumber": 450
            },
            {
                "name": "AccountLoanLimitUpdated",
                "parameters": "(uint256 loanLimit)",
                "lineNumber": 451
            },
            {
                "name": "LoanLiquidationOpenUpdated",
                "parameters": "(bool loanLiquidationOpen)",
                "lineNumber": 452
            },
            {
                "name": "LoanCreated",
                "parameters": "(address account, uint256 loanID, uint256 amount)",
                "lineNumber": 453
            },
            {
                "name": "LoanClosed",
                "parameters": "(address account, uint256 loanID, uint256 feesPaid)",
                "lineNumber": 454
            },
            {
                "name": "LoanLiquidated",
                "parameters": "(address account, uint256 loanID, address liquidator)",
                "lineNumber": 455
            }
        ],
        "variables": [
            {
                "name": "ONE_THOUSAND",
                "type": "uint256",
                "lineNumber": 21,
                "visibility": "internal"
            },
            {
                "name": "ONE_HUNDRED",
                "type": "uint256",
                "lineNumber": 22,
                "visibility": "internal"
            },
            {
                "name": "SECONDS_IN_A_YEAR",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "internal"
            },
            {
                "name": "FEE_ADDRESS",
                "type": "address",
                "lineNumber": 27,
                "visibility": "internal"
            },
            {
                "name": "collateralizationRatio",
                "type": "uint256",
                "lineNumber": 32,
                "visibility": "public"
            },
            {
                "name": "interestRate",
                "type": "uint256",
                "lineNumber": 35,
                "visibility": "public"
            },
            {
                "name": "interestPerSecond",
                "type": "uint256",
                "lineNumber": 36,
                "visibility": "public"
            },
            {
                "name": "issueFeeRate",
                "type": "uint256",
                "lineNumber": 39,
                "visibility": "public"
            },
            {
                "name": "issueLimit",
                "type": "uint256",
                "lineNumber": 42,
                "visibility": "public"
            },
            {
                "name": "minLoanSize",
                "type": "uint256",
                "lineNumber": 45,
                "visibility": "public"
            },
            {
                "name": "accountLoanLimit",
                "type": "uint256",
                "lineNumber": 48,
                "visibility": "public"
            },
            {
                "name": "loanLiquidationOpen",
                "type": "bool",
                "lineNumber": 51,
                "visibility": "public"
            },
            {
                "name": "liquidationDeadline",
                "type": "uint256",
                "lineNumber": 54,
                "visibility": "public"
            },
            {
                "name": "totalIssuedSynths",
                "type": "uint256",
                "lineNumber": 59,
                "visibility": "public"
            },
            {
                "name": "totalLoansCreated",
                "type": "uint256",
                "lineNumber": 62,
                "visibility": "public"
            },
            {
                "name": "totalOpenLoanCount",
                "type": "uint256",
                "lineNumber": 65,
                "visibility": "public"
            },
            {
                "name": "accountsSynthLoans",
                "type": "mapping(address => struct EtherCollateral.SynthLoanStruct[])",
                "lineNumber": 84,
                "visibility": "public"
            },
            {
                "name": "accountOpenLoanCounter",
                "type": "mapping(address => uint256)",
                "lineNumber": 87,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYSTEMSTATUS",
                "type": "bytes32",
                "lineNumber": 91,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHSETH",
                "type": "bytes32",
                "lineNumber": 92,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHSUSD",
                "type": "bytes32",
                "lineNumber": 93,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_DEPOT",
                "type": "bytes32",
                "lineNumber": 94,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 96,
                "visibility": "private"
            }
        ],
        "structs": [
            {
                "name": "SynthLoanStruct",
                "members": [
                    {
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "name": "collateralAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "loanAmount",
                        "type": "uint256"
                    },
                    {
                        "name": "timeCreated",
                        "type": "uint256"
                    },
                    {
                        "name": "loanID",
                        "type": "uint256"
                    },
                    {
                        "name": "timeClosed",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 68
            }
        ]
    },
    "contracts/ExchangeRates.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ExchangeRates"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _oracle, bytes32[] _currencyKeys, uint256[] _newRates) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 55
            },
            {
                "name": "setOracle",
                "signature": "setOracle(address _oracle) external",
                "returns": "()",
                "events": [
                    "OracleUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 73
            },
            {
                "name": "setRateStalePeriod",
                "signature": "setRateStalePeriod(uint256 _time) external",
                "returns": "()",
                "events": [
                    "RateStalePeriodUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 78
            },
            {
                "name": "updateRates",
                "signature": "updateRates(bytes32[] currencyKeys, uint256[] newRates, uint256 timeSent) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "onlyOracle"
                ],
                "documentation": "@notice Set the rates stored in this contract\n@param currencyKeys The currency keys you wish to update the rates for (in order)\n@param newRates The rates for each currency (in order)\n@param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).\n                This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\n                if it takes a long time for the transaction to confirm.",
                "visibility": "external",
                "lineNumber": 93
            },
            {
                "name": "deleteRate",
                "signature": "deleteRate(bytes32 currencyKey) external",
                "returns": "()",
                "events": [
                    "RateDeleted"
                ],
                "modifiers": [
                    "onlyOracle"
                ],
                "documentation": "@notice Delete a rate stored in the contract\n@param currencyKey The currency key you wish to delete the rate for",
                "visibility": "external",
                "lineNumber": 105
            },
            {
                "name": "setInversePricing",
                "signature": "setInversePricing(bytes32 currencyKey, uint256 entryPoint, uint256 upperLimit, uint256 lowerLimit, bool freeze, bool freezeAtUpperLimit) external",
                "returns": "()",
                "events": [
                    "InversePriceConfigured"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set an inverse price up for the currency key.\n     * An inverse price is one which has an entryPoint, an uppper and a lower limit. Each update, the\nrate is calculated as double the entryPrice minus the current rate. If this calculation is\nabove or below the upper or lower limits respectively, then the rate is frozen, and no more\nrate updates will be accepted.\n     * @param currencyKey The currency to update\n@param entryPoint The entry price point of the inverted price\n@param upperLimit The upper limit, at or above which the price will be frozen\n@param lowerLimit The lower limit, at or below which the price will be frozen\n@param freeze Whether or not to freeze this rate immediately. Note: no frozen event will be configured\n@param freezeAtUpperLimit When the freeze flag is true, this flag indicates whether the rate\nto freeze at is the upperLimit or lowerLimit..",
                "visibility": "external",
                "lineNumber": 131
            },
            {
                "name": "removeInversePricing",
                "signature": "removeInversePricing(bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Remove an inverse price for the currency key\n@param currencyKey The currency to remove inverse pricing for",
                "visibility": "external",
                "lineNumber": 170
            },
            {
                "name": "addAggregator",
                "signature": "addAggregator(bytes32 currencyKey, address aggregatorAddress) external",
                "returns": "()",
                "events": [
                    "AggregatorAdded"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Add a pricing aggregator for the given key. Note: existing aggregators may be overridden.\n@param currencyKey The currency key to add an aggregator for",
                "visibility": "external",
                "lineNumber": 190
            },
            {
                "name": "removeAggregator",
                "signature": "removeAggregator(bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Remove a pricing aggregator for the given key\n@param currencyKey The currency key to remove an aggregator for",
                "visibility": "external",
                "lineNumber": 204
            },
            {
                "name": "getLastRoundIdBeforeElapsedSecs",
                "signature": "getLastRoundIdBeforeElapsedSecs(bytes32 currencyKey, uint256 startingRoundId, uint256 startingTimestamp, uint256 timediff) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 216
            },
            {
                "name": "getCurrentRoundId",
                "signature": "getCurrentRoundId(bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 235
            },
            {
                "name": "effectiveValueAtRound",
                "signature": "effectiveValueAtRound(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, uint256 roundIdForSrc, uint256 roundIdForDest) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale",
                    "rateNotStale"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 244
            },
            {
                "name": "rateAndTimestampAtRound",
                "signature": "rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId) external",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 260
            },
            {
                "name": "lastRateUpdateTimes",
                "signature": "lastRateUpdateTimes(bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieves the timestamp the given rate was last updated.",
                "visibility": "public",
                "lineNumber": 269
            },
            {
                "name": "lastRateUpdateTimesForCurrencies",
                "signature": "lastRateUpdateTimesForCurrencies(bytes32[] currencyKeys) public",
                "returns": "(uint256[])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the last update time for a list of currencies",
                "visibility": "public",
                "lineNumber": 276
            },
            {
                "name": "effectiveValue",
                "signature": "effectiveValue(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale",
                    "rateNotStale"
                ],
                "documentation": "@notice A function that lets you easily convert an amount in a source currency to an amount in the destination currency\n@param sourceCurrencyKey The currency the amount is specified in\n@param sourceAmount The source amount, specified in UNIT base\n@param destinationCurrencyKey The destination currency",
                "visibility": "public",
                "lineNumber": 292
            },
            {
                "name": "rateForCurrency",
                "signature": "rateForCurrency(bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the rate for a specific currency",
                "visibility": "external",
                "lineNumber": 310
            },
            {
                "name": "ratesForCurrencies",
                "signature": "ratesForCurrencies(bytes32[] currencyKeys) external",
                "returns": "(uint256[])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the rates for a list of currencies",
                "visibility": "external",
                "lineNumber": 317
            },
            {
                "name": "ratesAndStaleForCurrencies",
                "signature": "ratesAndStaleForCurrencies(bytes32[] currencyKeys) external",
                "returns": "(uint256[], bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the rates and isAnyStale for a list of currencies",
                "visibility": "external",
                "lineNumber": 330
            },
            {
                "name": "rateIsStale",
                "signature": "rateIsStale(bytes32 currencyKey) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Check if a specific currency's rate hasn't been updated for longer than the stale period.",
                "visibility": "public",
                "lineNumber": 349
            },
            {
                "name": "rateIsFrozen",
                "signature": "rateIsFrozen(bytes32 currencyKey) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Check if any rate is frozen (cannot be exchanged into)",
                "visibility": "external",
                "lineNumber": 359
            },
            {
                "name": "anyRateIsStale",
                "signature": "anyRateIsStale(bytes32[] currencyKeys) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Check if any of the currency rates passed in haven't been updated for longer than the stale period.",
                "visibility": "external",
                "lineNumber": 366
            },
            {
                "name": "_setRate",
                "signature": "_setRate(bytes32 currencyKey, uint256 rate, uint256 time) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 383
            },
            {
                "name": "internalUpdateRates",
                "signature": "internalUpdateRates(bytes32[] currencyKeys, uint256[] newRates, uint256 timeSent) internal",
                "returns": "(bool)",
                "events": [
                    "RatesUpdated"
                ],
                "modifiers": [],
                "documentation": "@notice Internal function which sets the rates stored in this contract\n@param currencyKeys The currency keys you wish to update the rates for (in order)\n@param newRates The rates for each currency (in order)\n@param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract\n                This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\n                if it takes a long time for the transaction to confirm.",
                "visibility": "internal",
                "lineNumber": 405
            },
            {
                "name": "rateOrInverted",
                "signature": "rateOrInverted(bytes32 currencyKey, uint256 rate) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Internal function to get the inverted rate, if any, and mark an inverted\n key as frozen if either limits are reached.\n     * Inverted rates are ones that take a regular rate, perform a simple calculation (double entryPrice and\nsubtract the rate) on them and if the result of the calculation is over or under predefined limits, it freezes the\nrate at that limit, preventing any future rate updates.\n     * For example, if we have an inverted rate iBTC with the following parameters set:\n- entryPrice of 200\n- upperLimit of 300\n- lower of 100\n     * if this function is invoked with params iETH and 184 (or rather 184e18),\nthen the rate would be: 200 * 2 - 184 = 216. 100 < 216 < 200, so the rate would be 216,\nand remain unfrozen.\n     * If this function is then invoked with params iETH and 301 (or rather 301e18),\nthen the rate would be: 200 * 2 - 301 = 99. 99 < 100, so the rate would be 100 and the\nrate would become frozen, no longer accepting future price updates until the synth is unfrozen\nby the owner function: setInversePricing().\n     * @param currencyKey The price key to lookup\n@param rate The rate for the given price key",
                "visibility": "internal",
                "lineNumber": 464
            },
            {
                "name": "getRateAndUpdatedTime",
                "signature": "getRateAndUpdatedTime(bytes32 currencyKey) internal",
                "returns": "(struct ExchangeRates.RateAndUpdatedTime)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 502
            },
            {
                "name": "removeFromArray",
                "signature": "removeFromArray(bytes32 entry, bytes32[] array) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Remove a single value from an array by iterating through until it is found.\n@param entry The entry to find\n@param array The array to mutate\n@return bool Whether or not the entry was found and removed",
                "visibility": "internal",
                "lineNumber": 520
            },
            {
                "name": "getRateAndTimestampAtRound",
                "signature": "getRateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId) internal",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 539
            },
            {
                "name": "getRate",
                "signature": "getRate(bytes32 currencyKey) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 549
            }
        ],
        "events": [
            {
                "name": "OracleUpdated",
                "parameters": "(address newOracle)",
                "lineNumber": 567
            },
            {
                "name": "RateStalePeriodUpdated",
                "parameters": "(uint256 rateStalePeriod)",
                "lineNumber": 568
            },
            {
                "name": "RatesUpdated",
                "parameters": "(bytes32[] currencyKeys, uint256[] newRates)",
                "lineNumber": 569
            },
            {
                "name": "RateDeleted",
                "parameters": "(bytes32 currencyKey)",
                "lineNumber": 570
            },
            {
                "name": "InversePriceConfigured",
                "parameters": "(bytes32 currencyKey, uint256 entryPoint, uint256 upperLimit, uint256 lowerLimit)",
                "lineNumber": 571
            },
            {
                "name": "InversePriceFrozen",
                "parameters": "(bytes32 currencyKey)",
                "lineNumber": 572
            },
            {
                "name": "AggregatorAdded",
                "parameters": "(bytes32 currencyKey, address aggregator)",
                "lineNumber": 573
            },
            {
                "name": "AggregatorRemoved",
                "parameters": "(bytes32 currencyKey, address aggregator)",
                "lineNumber": 574
            }
        ],
        "variables": [
            {
                "name": "_rates",
                "type": "mapping(bytes32 => mapping(uint256 => struct ExchangeRates.RateAndUpdatedTime))",
                "lineNumber": 23,
                "visibility": "private"
            },
            {
                "name": "oracle",
                "type": "address",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "aggregators",
                "type": "mapping(bytes32 => contract AggregatorInterface)",
                "lineNumber": 29,
                "visibility": "public"
            },
            {
                "name": "aggregatorKeys",
                "type": "bytes32[]",
                "lineNumber": 32,
                "visibility": "public"
            },
            {
                "name": "ORACLE_FUTURE_LIMIT",
                "type": "uint256",
                "lineNumber": 35,
                "visibility": "private"
            },
            {
                "name": "rateStalePeriod",
                "type": "uint256",
                "lineNumber": 38,
                "visibility": "public"
            },
            {
                "name": "inversePricing",
                "type": "mapping(bytes32 => struct ExchangeRates.InversePricing)",
                "lineNumber": 47,
                "visibility": "public"
            },
            {
                "name": "invertedKeys",
                "type": "bytes32[]",
                "lineNumber": 48,
                "visibility": "public"
            },
            {
                "name": "currentRoundForRate",
                "type": "mapping(bytes32 => uint256)",
                "lineNumber": 50,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "rateNotStale",
                "parameters": "(bytes32 currencyKey)",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 555
            },
            {
                "name": "onlyOracle",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 560
            }
        ],
        "structs": [
            {
                "name": "RateAndUpdatedTime",
                "members": [
                    {
                        "name": "rate",
                        "type": "uint216"
                    },
                    {
                        "name": "time",
                        "type": "uint40"
                    }
                ],
                "lineNumber": 17
            },
            {
                "name": "InversePricing",
                "members": [
                    {
                        "name": "entryPoint",
                        "type": "uint256"
                    },
                    {
                        "name": "upperLimit",
                        "type": "uint256"
                    },
                    {
                        "name": "lowerLimit",
                        "type": "uint256"
                    },
                    {
                        "name": "frozen",
                        "type": "bool"
                    }
                ],
                "lineNumber": 41
            }
        ]
    },
    "contracts/ExchangeState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ExchangeState"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _associatedContract) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "State"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 24
            },
            {
                "name": "setMaxEntriesInQueue",
                "signature": "setMaxEntriesInQueue(uint256 _maxEntriesInQueue) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 28
            },
            {
                "name": "appendExchangeEntry",
                "signature": "appendExchangeEntry(address account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 34
            },
            {
                "name": "removeEntries",
                "signature": "removeEntries(address account, bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 61
            },
            {
                "name": "getLengthOfEntries",
                "signature": "getLengthOfEntries(address account, bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 67
            },
            {
                "name": "getEntryAt",
                "signature": "getEntryAt(address account, bytes32 currencyKey, uint256 index) external",
                "returns": "(bytes32, uint256, bytes32, uint256, uint256, uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 71
            },
            {
                "name": "getMaxTimestamp",
                "signature": "getMaxTimestamp(address account, bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 102
            }
        ],
        "variables": [
            {
                "name": "exchanges",
                "type": "mapping(address => mapping(bytes32 => struct ExchangeState.ExchangeEntry[]))",
                "lineNumber": 20,
                "visibility": "public"
            },
            {
                "name": "maxEntriesInQueue",
                "type": "uint256",
                "lineNumber": 22,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "ExchangeEntry",
                "members": [
                    {
                        "name": "src",
                        "type": "bytes32"
                    },
                    {
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "name": "dest",
                        "type": "bytes32"
                    },
                    {
                        "name": "amountReceived",
                        "type": "uint256"
                    },
                    {
                        "name": "exchangeFeeRate",
                        "type": "uint256"
                    },
                    {
                        "name": "timestamp",
                        "type": "uint256"
                    },
                    {
                        "name": "roundIdForSrc",
                        "type": "uint256"
                    },
                    {
                        "name": "roundIdForDest",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 9
            }
        ]
    },
    "contracts/Exchanger.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Exchanger"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 42
            },
            {
                "name": "systemStatus",
                "signature": "systemStatus() internal",
                "returns": "(contract ISystemStatus)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 48
            },
            {
                "name": "exchangeState",
                "signature": "exchangeState() internal",
                "returns": "(contract IExchangeState)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 52
            },
            {
                "name": "exchangeRates",
                "signature": "exchangeRates() internal",
                "returns": "(contract IExchangeRates)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 56
            },
            {
                "name": "synthetix",
                "signature": "synthetix() internal",
                "returns": "(contract ISynthetix)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 60
            },
            {
                "name": "feePool",
                "signature": "feePool() internal",
                "returns": "(contract IFeePool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 64
            },
            {
                "name": "delegateApprovals",
                "signature": "delegateApprovals() internal",
                "returns": "(contract IDelegateApprovals)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 68
            },
            {
                "name": "maxSecsLeftInWaitingPeriod",
                "signature": "maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 72
            },
            {
                "name": "feeRateForExchange",
                "signature": "feeRateForExchange(bytes32 , bytes32 ) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 77
            },
            {
                "name": "settlementOwing",
                "signature": "settlementOwing(address account, bytes32 currencyKey) public",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 87
            },
            {
                "name": "setWaitingPeriodSecs",
                "signature": "setWaitingPeriodSecs(uint256 _waitingPeriodSecs) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 137
            },
            {
                "name": "calculateAmountAfterSettlement",
                "signature": "calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint256 amount, uint256 refunded) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 141
            },
            {
                "name": "exchange",
                "signature": "exchange(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "onlySynthetixorSynth"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 164
            },
            {
                "name": "exchangeOnBehalf",
                "signature": "exchangeOnBehalf(address exchangeForAddress, address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "onlySynthetixorSynth"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 174
            },
            {
                "name": "_exchange",
                "signature": "_exchange(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 191
            },
            {
                "name": "settle",
                "signature": "settle(address from, bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 273
            },
            {
                "name": "remitFee",
                "signature": "remitFee(contract IExchangeRates _exRates, contract ISynthetix _synthetix, uint256 fee, bytes32 currencyKey) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 292
            },
            {
                "name": "_internalSettle",
                "signature": "_internalSettle(address from, bytes32 currencyKey) internal",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 305
            },
            {
                "name": "reclaim",
                "signature": "reclaim(address from, bytes32 currencyKey, uint256 amount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 331
            },
            {
                "name": "refund",
                "signature": "refund(address from, bytes32 currencyKey, uint256 amount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 341
            },
            {
                "name": "secsLeftInWaitingPeriodForExchange",
                "signature": "secsLeftInWaitingPeriodForExchange(uint256 timestamp) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 351
            },
            {
                "name": "calculateExchangeAmountMinusFees",
                "signature": "calculateExchangeAmountMinusFees(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey, uint256 destinationAmount) internal",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 359
            },
            {
                "name": "appendExchange",
                "signature": "appendExchange(address account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 375
            },
            {
                "name": "getRoundIdsAtPeriodEnd",
                "signature": "getRoundIdsAtPeriodEnd(address account, bytes32 currencyKey, uint256 index) internal",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 399
            }
        ],
        "variables": [
            {
                "name": "sUSD",
                "type": "bytes32",
                "lineNumber": 20,
                "visibility": "private"
            },
            {
                "name": "waitingPeriodSecs",
                "type": "uint256",
                "lineNumber": 22,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYSTEMSTATUS",
                "type": "bytes32",
                "lineNumber": 26,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXCHANGESTATE",
                "type": "bytes32",
                "lineNumber": 27,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXRATES",
                "type": "bytes32",
                "lineNumber": 28,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIX",
                "type": "bytes32",
                "lineNumber": 29,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOL",
                "type": "bytes32",
                "lineNumber": 30,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_DELEGATEAPPROVALS",
                "type": "bytes32",
                "lineNumber": 31,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 33,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "onlySynthetixorSynth",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 414
            }
        ]
    },
    "contracts/ExternStateToken.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ExternStateToken"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _name, string _symbol, uint256 _totalSupply, uint8 _decimals, address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible",
                    "Proxyable"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 27
            },
            {
                "name": "allowance",
                "signature": "allowance(address owner, address spender) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Returns the ERC20 allowance of one party to spend on behalf of another.\n@param owner The party authorising spending of their funds.\n@param spender The party spending tokenOwner's funds.",
                "visibility": "public",
                "lineNumber": 51
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Returns the ERC20 token balance of a given account.",
                "visibility": "public",
                "lineNumber": 58
            },
            {
                "name": "setTokenState",
                "signature": "setTokenState(contract TokenState _tokenState) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Set the address of the TokenState contract.\n@dev This can be used to \"pause\" transfer functionality, by pointing the tokenState at 0x000..\nas balances would be unreachable.",
                "visibility": "external",
                "lineNumber": 69
            },
            {
                "name": "_internalTransfer",
                "signature": "_internalTransfer(address from, address to, uint256 value) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 74
            },
            {
                "name": "_transferByProxy",
                "signature": "_transferByProxy(address from, address to, uint256 value) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Perform an ERC20 token transfer. Designed to be called by transfer functions possessing\nthe onlyProxy or optionalProxy modifiers.",
                "visibility": "internal",
                "lineNumber": 96
            },
            {
                "name": "_transferFromByProxy",
                "signature": "_transferFromByProxy(address sender, address from, address to, uint256 value) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 108
            },
            {
                "name": "approve",
                "signature": "approve(address spender, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": "@notice Approves spender to transfer on the message sender's behalf.",
                "visibility": "public",
                "lineNumber": 122
            },
            {
                "name": "addressToBytes32",
                "signature": "addressToBytes32(address input) internal",
                "returns": "(bytes32)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 131
            },
            {
                "name": "emitTransfer",
                "signature": "emitTransfer(address from, address to, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 138
            },
            {
                "name": "emitApproval",
                "signature": "emitApproval(address owner, address spender, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 149
            },
            {
                "name": "emitTokenStateUpdated",
                "signature": "emitTokenStateUpdated(address newTokenState) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 160
            }
        ],
        "events": [
            {
                "name": "Transfer",
                "parameters": "(address from, address to, uint256 value)",
                "lineNumber": 135
            },
            {
                "name": "Approval",
                "parameters": "(address owner, address spender, uint256 value)",
                "lineNumber": 146
            },
            {
                "name": "TokenStateUpdated",
                "parameters": "(address newTokenState)",
                "lineNumber": 157
            }
        ],
        "variables": [
            {
                "name": "tokenState",
                "type": "contract TokenState",
                "lineNumber": 19,
                "visibility": "public"
            },
            {
                "name": "name",
                "type": "string",
                "lineNumber": 22,
                "visibility": "public"
            },
            {
                "name": "symbol",
                "type": "string",
                "lineNumber": 23,
                "visibility": "public"
            },
            {
                "name": "totalSupply",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "decimals",
                "type": "uint8",
                "lineNumber": 25,
                "visibility": "public"
            },
            {
                "name": "TRANSFER_SIG",
                "type": "bytes32",
                "lineNumber": 136,
                "visibility": "internal"
            },
            {
                "name": "APPROVAL_SIG",
                "type": "bytes32",
                "lineNumber": 147,
                "visibility": "internal"
            },
            {
                "name": "TOKENSTATEUPDATED_SIG",
                "type": "bytes32",
                "lineNumber": 158,
                "visibility": "internal"
            }
        ]
    },
    "contracts/FeePool.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "FeePool"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, address _owner, uint256 _exchangeFeeRate, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible",
                    "Proxyable",
                    "LimitedSetup",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 103
            },
            {
                "name": "systemStatus",
                "signature": "systemStatus() internal",
                "returns": "(contract ISystemStatus)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 128
            },
            {
                "name": "synthetix",
                "signature": "synthetix() internal",
                "returns": "(contract ISynthetix)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 132
            },
            {
                "name": "feePoolState",
                "signature": "feePoolState() internal",
                "returns": "(contract FeePoolState)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 136
            },
            {
                "name": "feePoolEternalStorage",
                "signature": "feePoolEternalStorage() internal",
                "returns": "(contract FeePoolEternalStorage)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 140
            },
            {
                "name": "exchanger",
                "signature": "exchanger() internal",
                "returns": "(contract IExchanger)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 147
            },
            {
                "name": "issuer",
                "signature": "issuer() internal",
                "returns": "(contract IIssuer)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 151
            },
            {
                "name": "synthetixState",
                "signature": "synthetixState() internal",
                "returns": "(contract ISynthetixState)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 155
            },
            {
                "name": "rewardEscrow",
                "signature": "rewardEscrow() internal",
                "returns": "(contract ISynthetixEscrow)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 159
            },
            {
                "name": "delegateApprovals",
                "signature": "delegateApprovals() internal",
                "returns": "(contract DelegateApprovals)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 163
            },
            {
                "name": "rewardsDistribution",
                "signature": "rewardsDistribution() internal",
                "returns": "(contract IRewardsDistribution)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 167
            },
            {
                "name": "recentFeePeriods",
                "signature": "recentFeePeriods(uint256 index) external",
                "returns": "(uint64, uint64, uint64, uint256, uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 172
            },
            {
                "name": "_recentFeePeriodsStorage",
                "signature": "_recentFeePeriodsStorage(uint256 index) internal",
                "returns": "(struct FeePool.FeePeriod)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 197
            },
            {
                "name": "appendAccountIssuanceRecord",
                "signature": "appendAccountIssuanceRecord(address account, uint256 debtRatio, uint256 debtEntryIndex) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyIssuer"
                ],
                "documentation": "@notice Logs an accounts issuance data per fee period\n@param account Message.Senders account address\n@param debtRatio Debt percentage this account has locked after minting or burning their synth\n@param debtEntryIndex The index in the global debt ledger. synthetixState.issuanceData(account)\n@dev onlyIssuer to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\nper fee period so we know to allocate the correct proportions of fees and rewards per period",
                "visibility": "external",
                "lineNumber": 211
            },
            {
                "name": "setExchangeFeeRate",
                "signature": "setExchangeFeeRate(uint256 _exchangeFeeRate) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Set the exchange fee, anywhere within the range 0-10%.\n@dev The fee rate is in decimal format, with UNIT being the value of 100%.",
                "visibility": "external",
                "lineNumber": 230
            },
            {
                "name": "setFeePeriodDuration",
                "signature": "setFeePeriodDuration(uint256 _feePeriodDuration) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Set the fee period duration",
                "visibility": "external",
                "lineNumber": 238
            },
            {
                "name": "setTargetThreshold",
                "signature": "setTargetThreshold(uint256 _percent) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 247
            },
            {
                "name": "recordFeePaid",
                "signature": "recordFeePaid(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyExchangerOrSynth"
                ],
                "documentation": "@notice The Exchanger contract informs us when fees are paid.\n@param amount susd amount in fees being paid.",
                "visibility": "external",
                "lineNumber": 257
            },
            {
                "name": "setRewardsToDistribute",
                "signature": "setRewardsToDistribute(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The RewardsDistribution contract informs us how many SNX rewards are sent to RewardEscrow to be claimed.",
                "visibility": "external",
                "lineNumber": 265
            },
            {
                "name": "closeCurrentFeePeriod",
                "signature": "closeCurrentFeePeriod() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Close the current fee period and start a new one.",
                "visibility": "external",
                "lineNumber": 275
            },
            {
                "name": "claimFees",
                "signature": "claimFees() external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": "@notice Claim fees for last period when available or not already withdrawn.",
                "visibility": "external",
                "lineNumber": 316
            },
            {
                "name": "claimOnBehalf",
                "signature": "claimOnBehalf(address claimingForAddress) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": "@notice Delegated claimFees(). Call from the deletegated address\nand the fees will be sent to the claimingForAddress.\napproveClaimOnBehalf() must be called first to approve the deletage address\n@param claimingForAddress The account you are claiming fees for",
                "visibility": "external",
                "lineNumber": 326
            },
            {
                "name": "_claimFees",
                "signature": "_claimFees(address claimingAddress) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 332
            },
            {
                "name": "importFeePeriod",
                "signature": "importFeePeriod(uint256 feePeriodIndex, uint256 feePeriodId, uint256 startingDebtIndex, uint256 startTime, uint256 feesToDistribute, uint256 feesClaimed, uint256 rewardsToDistribute, uint256 rewardsClaimed) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Admin function to import the FeePeriod data from the previous contract",
                "visibility": "public",
                "lineNumber": 379
            },
            {
                "name": "appendVestingEntry",
                "signature": "appendVestingEntry(address account, uint256 quantity) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Owner can escrow SNX. Owner to send the tokens to the RewardEscrow\n@param account Address to escrow tokens for\n@param quantity Amount of tokens to escrow",
                "visibility": "public",
                "lineNumber": 407
            },
            {
                "name": "_recordFeePayment",
                "signature": "_recordFeePayment(uint256 sUSDAmount) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Record the fee payment in our recentFeePeriods.\n@param sUSDAmount The amount of fees priced in sUSD.",
                "visibility": "internal",
                "lineNumber": 419
            },
            {
                "name": "_recordRewardPayment",
                "signature": "_recordRewardPayment(uint256 snxAmount) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Record the reward payment in our recentFeePeriods.\n@param snxAmount The amount of SNX tokens.",
                "visibility": "internal",
                "lineNumber": 457
            },
            {
                "name": "_payFees",
                "signature": "_payFees(address account, uint256 sUSDAmount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "notFeeAddress"
                ],
                "documentation": "@notice Send the fees to claiming address.\n@param account The address to send the fees to.\n@param sUSDAmount The amount of fees priced in sUSD.",
                "visibility": "internal",
                "lineNumber": 498
            },
            {
                "name": "_payRewards",
                "signature": "_payRewards(address account, uint256 snxAmount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "notFeeAddress"
                ],
                "documentation": "@notice Send the rewards to claiming address - will be locked in rewardEscrow.\n@param account The address to send the fees to.\n@param snxAmount The amount of SNX.",
                "visibility": "internal",
                "lineNumber": 527
            },
            {
                "name": "amountReceivedFromTransfer",
                "signature": "amountReceivedFromTransfer(uint256 value) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The amount the recipient will receive if you send a certain number of tokens.\nfunction used by Depot and stub will return value amount inputted.\n@param value The amount of tokens you intend to send.",
                "visibility": "external",
                "lineNumber": 543
            },
            {
                "name": "exchangeFeeIncurred",
                "signature": "exchangeFeeIncurred(uint256 value) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculate the fee charged on top of a value being sent via an exchange\n@return Return the fee charged",
                "visibility": "public",
                "lineNumber": 551
            },
            {
                "name": "amountReceivedFromExchange",
                "signature": "amountReceivedFromExchange(uint256 value) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The amount the recipient will receive if you are performing an exchange and the\ndestination currency will be worth a certain number of tokens.\n@param value The amount of destination currency tokens they received after the exchange.",
                "visibility": "external",
                "lineNumber": 568
            },
            {
                "name": "totalFeesAvailable",
                "signature": "totalFeesAvailable() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The total fees available in the system to be withdrawnn in sUSD",
                "visibility": "external",
                "lineNumber": 575
            },
            {
                "name": "totalRewardsAvailable",
                "signature": "totalRewardsAvailable() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The total SNX rewards available in the system to be withdrawn",
                "visibility": "external",
                "lineNumber": 590
            },
            {
                "name": "feesAvailable",
                "signature": "feesAvailable(address account) public",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The fees available to be withdrawn by a specific account, priced in sUSD\n@dev Returns two amounts, one for fees and one for SNX rewards",
                "visibility": "public",
                "lineNumber": 606
            },
            {
                "name": "isFeesClaimable",
                "signature": "isFeesClaimable(address account) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Check if a particular address is able to claim fees right now\n@param account The address you want to query for",
                "visibility": "public",
                "lineNumber": 628
            },
            {
                "name": "feesByPeriod",
                "signature": "feesByPeriod(address account) public",
                "returns": "(uint256[2][2])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculates fees by period for an account, priced in sUSD\n@param account The address you want to query the fees for",
                "visibility": "public",
                "lineNumber": 655
            },
            {
                "name": "_feesAndRewardsFromPeriod",
                "signature": "_feesAndRewardsFromPeriod(uint256 period, uint256 ownershipPercentage, uint256 debtEntryIndex) internal",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice ownershipPercentage is a high precision decimals uint based on\nwallet's debtPercentage. Gives a precise amount of the feesToDistribute\nfor fees in the period. Precision factor is removed before results are\nreturned.\n@dev The reported fees owing for the current period [0] are just a\nrunning balance until the fee period closes",
                "visibility": "internal",
                "lineNumber": 717
            },
            {
                "name": "_effectiveDebtRatioForPeriod",
                "signature": "_effectiveDebtRatioForPeriod(uint256 closingDebtIndex, uint256 ownershipPercentage, uint256 debtEntryIndex) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 744
            },
            {
                "name": "effectiveDebtRatioForPeriod",
                "signature": "effectiveDebtRatioForPeriod(address account, uint256 period) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 760
            },
            {
                "name": "getLastFeeWithdrawal",
                "signature": "getLastFeeWithdrawal(address _claimingAddress) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get the feePeriodID of the last claim this account made\n@param _claimingAddress account to check the last fee period ID claim for\n@return uint of the feePeriodID this account last claimed",
                "visibility": "public",
                "lineNumber": 782
            },
            {
                "name": "getPenaltyThresholdRatio",
                "signature": "getPenaltyThresholdRatio() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Calculate the collateral ratio before user is blocked from claiming.",
                "visibility": "public",
                "lineNumber": 789
            },
            {
                "name": "_setLastFeeWithdrawal",
                "signature": "_setLastFeeWithdrawal(address _claimingAddress, uint256 _feePeriodID) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Set the feePeriodID of the last claim this account made\n@param _claimingAddress account to set the last feePeriodID claim for\n@param _feePeriodID the feePeriodID this account claimed fees for",
                "visibility": "internal",
                "lineNumber": 800
            },
            {
                "name": "emitIssuanceDebtRatioEntry",
                "signature": "emitIssuanceDebtRatioEntry(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 feePeriodStartingDebtIndex) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 838
            },
            {
                "name": "emitExchangeFeeUpdated",
                "signature": "emitExchangeFeeUpdated(uint256 newFeeRate) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 857
            },
            {
                "name": "emitFeePeriodDurationUpdated",
                "signature": "emitFeePeriodDurationUpdated(uint256 newFeePeriodDuration) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 864
            },
            {
                "name": "emitFeePeriodClosed",
                "signature": "emitFeePeriodClosed(uint256 feePeriodId) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 871
            },
            {
                "name": "emitFeesClaimed",
                "signature": "emitFeesClaimed(address account, uint256 sUSDAmount, uint256 snxRewards) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 878
            }
        ],
        "events": [
            {
                "name": "IssuanceDebtRatioEntry",
                "parameters": "(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 feePeriodStartingDebtIndex)",
                "lineNumber": 828
            },
            {
                "name": "ExchangeFeeUpdated",
                "parameters": "(uint256 newFeeRate)",
                "lineNumber": 854
            },
            {
                "name": "FeePeriodDurationUpdated",
                "parameters": "(uint256 newFeePeriodDuration)",
                "lineNumber": 861
            },
            {
                "name": "FeePeriodClosed",
                "parameters": "(uint256 feePeriodId)",
                "lineNumber": 868
            },
            {
                "name": "FeesClaimed",
                "parameters": "(address account, uint256 sUSDAmount, uint256 snxRewards)",
                "lineNumber": 875
            }
        ],
        "variables": [
            {
                "name": "exchangeFeeRate",
                "type": "uint256",
                "lineNumber": 29,
                "visibility": "public"
            },
            {
                "name": "MAX_EXCHANGE_FEE_RATE",
                "type": "uint256",
                "lineNumber": 32,
                "visibility": "public"
            },
            {
                "name": "FEE_ADDRESS",
                "type": "address",
                "lineNumber": 35,
                "visibility": "public"
            },
            {
                "name": "sUSD",
                "type": "bytes32",
                "lineNumber": 38,
                "visibility": "private"
            },
            {
                "name": "FEE_PERIOD_LENGTH",
                "type": "uint8",
                "lineNumber": 56,
                "visibility": "public"
            },
            {
                "name": "_recentFeePeriods",
                "type": "struct FeePool.FeePeriod[2]",
                "lineNumber": 58,
                "visibility": "private"
            },
            {
                "name": "_currentFeePeriod",
                "type": "uint256",
                "lineNumber": 59,
                "visibility": "private"
            },
            {
                "name": "feePeriodDuration",
                "type": "uint256",
                "lineNumber": 65,
                "visibility": "public"
            },
            {
                "name": "MIN_FEE_PERIOD_DURATION",
                "type": "uint256",
                "lineNumber": 67,
                "visibility": "public"
            },
            {
                "name": "MAX_FEE_PERIOD_DURATION",
                "type": "uint256",
                "lineNumber": 68,
                "visibility": "public"
            },
            {
                "name": "targetThreshold",
                "type": "uint256",
                "lineNumber": 71,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYSTEMSTATUS",
                "type": "bytes32",
                "lineNumber": 75,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIX",
                "type": "bytes32",
                "lineNumber": 76,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOLSTATE",
                "type": "bytes32",
                "lineNumber": 77,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOLETERNALSTORAGE",
                "type": "bytes32",
                "lineNumber": 78,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXCHANGER",
                "type": "bytes32",
                "lineNumber": 79,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_ISSUER",
                "type": "bytes32",
                "lineNumber": 80,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIXSTATE",
                "type": "bytes32",
                "lineNumber": 81,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_REWARDESCROW",
                "type": "bytes32",
                "lineNumber": 82,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_DELEGATEAPPROVALS",
                "type": "bytes32",
                "lineNumber": 83,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_REWARDSDISTRIBUTION",
                "type": "bytes32",
                "lineNumber": 84,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 86,
                "visibility": "private"
            },
            {
                "name": "LAST_FEE_WITHDRAWAL",
                "type": "bytes32",
                "lineNumber": 101,
                "visibility": "private"
            },
            {
                "name": "ISSUANCEDEBTRATIOENTRY_SIG",
                "type": "bytes32",
                "lineNumber": 834,
                "visibility": "private"
            },
            {
                "name": "EXCHANGEFEEUPDATED_SIG",
                "type": "bytes32",
                "lineNumber": 855,
                "visibility": "private"
            },
            {
                "name": "FEEPERIODDURATIONUPDATED_SIG",
                "type": "bytes32",
                "lineNumber": 862,
                "visibility": "private"
            },
            {
                "name": "FEEPERIODCLOSED_SIG",
                "type": "bytes32",
                "lineNumber": 869,
                "visibility": "private"
            },
            {
                "name": "FEESCLAIMED_SIG",
                "type": "bytes32",
                "lineNumber": 876,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "onlyExchangerOrSynth",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 808
            },
            {
                "name": "onlyIssuer",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 816
            },
            {
                "name": "notFeeAddress",
                "parameters": "(address account)",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 821
            }
        ],
        "structs": [
            {
                "name": "FeePeriod",
                "members": [
                    {
                        "name": "feePeriodId",
                        "type": "uint64"
                    },
                    {
                        "name": "startingDebtIndex",
                        "type": "uint64"
                    },
                    {
                        "name": "startTime",
                        "type": "uint64"
                    },
                    {
                        "name": "feesToDistribute",
                        "type": "uint256"
                    },
                    {
                        "name": "feesClaimed",
                        "type": "uint256"
                    },
                    {
                        "name": "rewardsToDistribute",
                        "type": "uint256"
                    },
                    {
                        "name": "rewardsClaimed",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 41
            }
        ]
    },
    "contracts/FeePoolEternalStorage.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "FeePoolEternalStorage"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _feePool) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "EternalStorage",
                    "LimitedSetup"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 11
            },
            {
                "name": "importFeeWithdrawalData",
                "signature": "importFeeWithdrawalData(address[] accounts, uint256[] feePeriodIDs) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 13
            }
        ],
        "variables": [
            {
                "name": "LAST_FEE_WITHDRAWAL",
                "type": "bytes32",
                "lineNumber": 9,
                "visibility": "internal"
            }
        ]
    },
    "contracts/FeePoolState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "FeePoolState"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, contract IFeePool _feePool) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible",
                    "LimitedSetup"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 30
            },
            {
                "name": "setFeePool",
                "signature": "setFeePool(contract IFeePool _feePool) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice set the FeePool contract as it is the only authority to be able to call\nappendAccountIssuanceRecord with the onlyFeePool modifer\n@dev Must be set by owner when FeePool logic is upgraded",
                "visibility": "external",
                "lineNumber": 41
            },
            {
                "name": "getAccountsDebtEntry",
                "signature": "getAccountsDebtEntry(address account, uint256 index) public",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get an accounts issuanceData for\n@param account users account\n@param index Index in the array to retrieve. Upto FEE_PERIOD_LENGTH",
                "visibility": "public",
                "lineNumber": 52
            },
            {
                "name": "applicableIssuanceData",
                "signature": "applicableIssuanceData(address account, uint256 closingDebtIndex) external",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Find the oldest debtEntryIndex for the corresponding closingDebtIndex\n@param account users account\n@param closingDebtIndex the last periods debt index on close",
                "visibility": "external",
                "lineNumber": 68
            },
            {
                "name": "appendAccountIssuanceRecord",
                "signature": "appendAccountIssuanceRecord(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 currentPeriodStartDebtIndex) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyFeePool"
                ],
                "documentation": "@notice Logs an accounts issuance data in the current fee period which is then stored historically\n@param account Message.Senders account address\n@param debtRatio Debt of this account as a percentage of the global debt.\n@param debtEntryIndex The index in the global debt ledger. synthetix.synthetixState().issuanceData(account)\n@param currentPeriodStartDebtIndex The startingDebtIndex of the current fee period\n@dev onlyFeePool to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX\nper fee period so we know to allocate the correct proportions of fees and rewards per period\naccountIssuanceLedger[account][0] has the latest locked amount for the current period. This can be update as many time\naccountIssuanceLedger[account][1-2] has the last locked amount for a previous period they minted or burned",
                "visibility": "external",
                "lineNumber": 93
            },
            {
                "name": "issuanceDataIndexOrder",
                "signature": "issuanceDataIndexOrder(address account) private",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Pushes down the entire array of debt ratios per fee period",
                "visibility": "private",
                "lineNumber": 113
            },
            {
                "name": "importIssuerData",
                "signature": "importIssuerData(address[] accounts, uint256[] ratios, uint256 periodToInsert, uint256 feePeriodCloseIndex) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Import issuer data from synthetixState.issuerData on FeePeriodClose() block #\n@dev Only callable by the contract owner, and only for 6 weeks after deployment.\n@param accounts Array of issuing addresses\n@param ratios Array of debt ratios\n@param periodToInsert The Fee Period to insert the historical records into\n@param feePeriodCloseIndex An accounts debtEntryIndex is valid when within the fee peroid,\nsince the input ratio will be an average of the pervious periods it just needs to be\n> recentFeePeriods[periodToInsert].startingDebtIndex\n< recentFeePeriods[periodToInsert - 1].startingDebtIndex",
                "visibility": "external",
                "lineNumber": 132
            }
        ],
        "events": [
            {
                "name": "IssuanceDebtRatioEntry",
                "parameters": "(address account, uint256 debtRatio, uint256 feePeriodCloseIndex)",
                "lineNumber": 155
            }
        ],
        "variables": [
            {
                "name": "FEE_PERIOD_LENGTH",
                "type": "uint8",
                "lineNumber": 17,
                "visibility": "public"
            },
            {
                "name": "feePool",
                "type": "address",
                "lineNumber": 19,
                "visibility": "public"
            },
            {
                "name": "accountIssuanceLedger",
                "type": "mapping(address => struct FeePoolState.IssuanceData[6])",
                "lineNumber": 28,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyFeePool",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 149
            }
        ],
        "structs": [
            {
                "name": "IssuanceData",
                "members": [
                    {
                        "name": "debtPercentage",
                        "type": "uint256"
                    },
                    {
                        "name": "debtEntryIndex",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 22
            }
        ]
    },
    "contracts/IssuanceEternalStorage.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IssuanceEternalStorage"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _issuer) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "EternalStorage"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 10
            }
        ]
    },
    "contracts/Issuer.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Issuer"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 46
            },
            {
                "name": "synthetix",
                "signature": "synthetix() internal",
                "returns": "(contract ISynthetix)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 49
            },
            {
                "name": "exchanger",
                "signature": "exchanger() internal",
                "returns": "(contract IExchanger)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 53
            },
            {
                "name": "synthetixState",
                "signature": "synthetixState() internal",
                "returns": "(contract ISynthetixState)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 57
            },
            {
                "name": "feePool",
                "signature": "feePool() internal",
                "returns": "(contract IFeePool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 61
            },
            {
                "name": "delegateApprovals",
                "signature": "delegateApprovals() internal",
                "returns": "(contract IDelegateApprovals)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 65
            },
            {
                "name": "issuanceEternalStorage",
                "signature": "issuanceEternalStorage() internal",
                "returns": "(contract IssuanceEternalStorage)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 69
            },
            {
                "name": "canBurnSynths",
                "signature": "canBurnSynths(address account) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 78
            },
            {
                "name": "lastIssueEvent",
                "signature": "lastIssueEvent(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 82
            },
            {
                "name": "setMinimumStakeTime",
                "signature": "setMinimumStakeTime(uint256 _seconds) external",
                "returns": "()",
                "events": [
                    "MinimumStakeTimeUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 89
            },
            {
                "name": "_setLastIssueEvent",
                "signature": "_setLastIssueEvent(address account) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 97
            },
            {
                "name": "issueSynthsOnBehalf",
                "signature": "issueSynthsOnBehalf(address issueForAddress, address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 102
            },
            {
                "name": "issueMaxSynthsOnBehalf",
                "signature": "issueMaxSynthsOnBehalf(address issueForAddress, address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 114
            },
            {
                "name": "issueSynths",
                "signature": "issueSynths(address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 121
            },
            {
                "name": "issueMaxSynths",
                "signature": "issueMaxSynths(address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 129
            },
            {
                "name": "_internalIssueSynths",
                "signature": "_internalIssueSynths(address from, uint256 amount, uint256 existingDebt, uint256 totalSystemDebt) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 137
            },
            {
                "name": "burnSynthsOnBehalf",
                "signature": "burnSynthsOnBehalf(address burnForAddress, address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 156
            },
            {
                "name": "burnSynths",
                "signature": "burnSynths(address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 165
            },
            {
                "name": "_burnSynths",
                "signature": "_burnSynths(address from, uint256 amount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 170
            },
            {
                "name": "burnSynthsToTargetOnBehalf",
                "signature": "burnSynthsToTargetOnBehalf(address burnForAddress, address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 190
            },
            {
                "name": "burnSynthsToTarget",
                "signature": "burnSynthsToTarget(address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 195
            },
            {
                "name": "_burnSynthsToTarget",
                "signature": "_burnSynthsToTarget(address from) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 201
            },
            {
                "name": "_internalBurnSynths",
                "signature": "_internalBurnSynths(address from, uint256 amount, uint256 existingDebt, uint256 totalSystemValue) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 218
            },
            {
                "name": "_appendAccountIssuanceRecord",
                "signature": "_appendAccountIssuanceRecord(address from) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Store in the FeePool the users current debt value in the system.\n@dev debtBalanceOf(messageSender, \"sUSD\") to be used with totalIssuedSynthsExcludeEtherCollateral(\"sUSD\") to get\n users % of the system within a feePeriod.",
                "visibility": "internal",
                "lineNumber": 247
            },
            {
                "name": "_addToDebtRegister",
                "signature": "_addToDebtRegister(address from, uint256 amount, uint256 existingDebt, uint256 totalDebtIssued) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Function that registers new synth as they are issued. Calculate delta to append to synthetixState.\n@dev Only internal calls from synthetix address.\n@param amount The amount of synths to register with a base of UNIT",
                "visibility": "internal",
                "lineNumber": 260
            },
            {
                "name": "_removeFromDebtRegister",
                "signature": "_removeFromDebtRegister(address from, uint256 amount, uint256 existingDebt, uint256 totalDebtIssued) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Remove a debt position from the register\n@param amount The amount (in UNIT base) being presented in sUSDs\n@param existingDebt The existing debt (in UNIT base) of address presented in sUSDs\n@param totalDebtIssued The existing system debt (in UNIT base) presented in sUSDs",
                "visibility": "internal",
                "lineNumber": 308
            }
        ],
        "events": [
            {
                "name": "MinimumStakeTimeUpdated",
                "parameters": "(uint256 minimumStakeTime)",
                "lineNumber": 361
            }
        ],
        "variables": [
            {
                "name": "sUSD",
                "type": "bytes32",
                "lineNumber": 20,
                "visibility": "private"
            },
            {
                "name": "LAST_ISSUE_EVENT",
                "type": "bytes32",
                "lineNumber": 21,
                "visibility": "public"
            },
            {
                "name": "MAX_MINIMUM_STAKING_TIME",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "minimumStakeTime",
                "type": "uint256",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYNTHETIX",
                "type": "bytes32",
                "lineNumber": 30,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXCHANGER",
                "type": "bytes32",
                "lineNumber": 31,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIXSTATE",
                "type": "bytes32",
                "lineNumber": 32,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOL",
                "type": "bytes32",
                "lineNumber": 33,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_DELEGATEAPPROVALS",
                "type": "bytes32",
                "lineNumber": 34,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_ISSUANCEETERNALSTORAGE",
                "type": "bytes32",
                "lineNumber": 35,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 37,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "onlySynthetix",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 354
            }
        ]
    },
    "contracts/LimitedSetup.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "LimitedSetup"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(uint256 setupDuration) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@dev LimitedSetup Constructor.\n@param setupDuration The time the setup period will last for.",
                "visibility": "internal",
                "lineNumber": 12
            }
        ],
        "variables": [
            {
                "name": "setupExpiryTime",
                "type": "uint256",
                "lineNumber": 6,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyDuringSetup",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 16
            }
        ]
    },
    "contracts/Math.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Math"
            }
        ],
        "functions": [
            {
                "name": "powDecimal",
                "signature": "powDecimal(uint256 x, uint256 n) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\nvs 0(N) for naive repeated multiplication.\nCalculates x^n with x as fixed-point and n as regular unsigned int.\nCalculates to 18 digits of precision with SafeDecimalMath.unit()",
                "visibility": "internal",
                "lineNumber": 17
            }
        ]
    },
    "contracts/MixinResolver.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MixinResolver"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _resolver, bytes32[24] _addressesToCache) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 17
            },
            {
                "name": "setResolverAndSyncCache",
                "signature": "setResolverAndSyncCache(contract AddressResolver _resolver) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 35
            },
            {
                "name": "requireAndGetAddress",
                "signature": "requireAndGetAddress(bytes32 name, string reason) internal",
                "returns": "(address)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 47
            },
            {
                "name": "isResolverCached",
                "signature": "isResolverCached(contract AddressResolver _resolver) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 55
            },
            {
                "name": "getResolverAddressesRequired",
                "signature": "getResolverAddressesRequired() external",
                "returns": "(bytes32[24])",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 73
            },
            {
                "name": "appendToAddressCache",
                "signature": "appendToAddressCache(bytes32 name) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 84
            }
        ],
        "variables": [
            {
                "name": "resolver",
                "type": "contract AddressResolver",
                "lineNumber": 9,
                "visibility": "public"
            },
            {
                "name": "addressCache",
                "type": "mapping(bytes32 => address)",
                "lineNumber": 11,
                "visibility": "private"
            },
            {
                "name": "resolverAddressesRequired",
                "type": "bytes32[]",
                "lineNumber": 13,
                "visibility": "public"
            },
            {
                "name": "MAX_ADDRESSES_FROM_RESOLVER",
                "type": "uint256",
                "lineNumber": 15,
                "visibility": "public"
            }
        ]
    },
    "contracts/MultiCollateralSynth.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MultiCollateralSynth"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver, bytes32 _multiCollateralKey) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Synth"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 12
            },
            {
                "name": "multiCollateral",
                "signature": "multiCollateral() internal",
                "returns": "(address)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 30
            },
            {
                "name": "issue",
                "signature": "issue(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyInternalContracts"
                ],
                "documentation": "@notice Function that allows multi Collateral to issue a certain number of synths from an account.\n@param account Account to issue synths to\n@param amount Number of synths",
                "visibility": "external",
                "lineNumber": 41
            },
            {
                "name": "burn",
                "signature": "burn(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyInternalContracts"
                ],
                "documentation": "@notice Function that allows multi Collateral to burn a certain number of synths from an account.\n@param account Account to burn synths from\n@param amount Number of synths",
                "visibility": "external",
                "lineNumber": 50
            }
        ],
        "variables": [
            {
                "name": "multiCollateralKey",
                "type": "bytes32",
                "lineNumber": 8,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyInternalContracts",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 57
            }
        ]
    },
    "contracts/Owned.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Owned"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [
                    "OwnerChanged"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 9
            },
            {
                "name": "nominateNewOwner",
                "signature": "nominateNewOwner(address _owner) external",
                "returns": "()",
                "events": [
                    "OwnerNominated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 15
            },
            {
                "name": "acceptOwnership",
                "signature": "acceptOwnership() external",
                "returns": "()",
                "events": [
                    "OwnerChanged"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 20
            }
        ],
        "events": [
            {
                "name": "OwnerNominated",
                "parameters": "(address newOwner)",
                "lineNumber": 32
            },
            {
                "name": "OwnerChanged",
                "parameters": "(address oldOwner, address newOwner)",
                "lineNumber": 33
            }
        ],
        "variables": [
            {
                "name": "owner",
                "type": "address",
                "lineNumber": 6,
                "visibility": "public"
            },
            {
                "name": "nominatedOwner",
                "type": "address",
                "lineNumber": 7,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyOwner",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 27
            }
        ]
    },
    "contracts/Pausable.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Pausable"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "() internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 11
            },
            {
                "name": "setPaused",
                "signature": "setPaused(bool _paused) external",
                "returns": "()",
                "events": [
                    "PauseChanged"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Change the paused state of the contract\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 21
            }
        ],
        "events": [
            {
                "name": "PauseChanged",
                "parameters": "(bool isPaused)",
                "lineNumber": 39
            }
        ],
        "variables": [
            {
                "name": "lastPauseTime",
                "type": "uint256",
                "lineNumber": 8,
                "visibility": "public"
            },
            {
                "name": "paused",
                "type": "bool",
                "lineNumber": 9,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "notPaused",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 41
            }
        ]
    },
    "contracts/Proxy.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Proxy"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 12
            },
            {
                "name": "setTarget",
                "signature": "setTarget(contract Proxyable _target) external",
                "returns": "()",
                "events": [
                    "TargetUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 14
            },
            {
                "name": "setUseDELEGATECALL",
                "signature": "setUseDELEGATECALL(bool value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 19
            },
            {
                "name": "_emit",
                "signature": "_emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyTarget"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 23
            },
            {
                "name": "fallback",
                "signature": "() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 59
            }
        ],
        "events": [
            {
                "name": "TargetUpdated",
                "parameters": "(contract Proxyable newTarget)",
                "lineNumber": 101
            }
        ],
        "variables": [
            {
                "name": "target",
                "type": "contract Proxyable",
                "lineNumber": 9,
                "visibility": "public"
            },
            {
                "name": "useDELEGATECALL",
                "type": "bool",
                "lineNumber": 10,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyTarget",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 96
            }
        ]
    },
    "contracts/ProxyERC20.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ProxyERC20"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Proxy"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 9
            },
            {
                "name": "name",
                "signature": "name() public",
                "returns": "(string)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 13
            },
            {
                "name": "symbol",
                "signature": "symbol() public",
                "returns": "(string)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 18
            },
            {
                "name": "decimals",
                "signature": "decimals() public",
                "returns": "(uint8)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 23
            },
            {
                "name": "totalSupply",
                "signature": "totalSupply() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Total number of tokens in existence",
                "visibility": "public",
                "lineNumber": 33
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Gets the balance of the specified address.\n@param account The address to query the balance of.\n@return An uint256 representing the amount owned by the passed address.",
                "visibility": "public",
                "lineNumber": 43
            },
            {
                "name": "allowance",
                "signature": "allowance(address owner, address spender) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Function to check the amount of tokens that an owner allowed to a spender.\n@param owner address The address which owns the funds.\n@param spender address The address which will spend the funds.\n@return A uint256 specifying the amount of tokens still available for the spender.",
                "visibility": "public",
                "lineNumber": 54
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Transfer token for a specified address\n@param to The address to transfer to.\n@param value The amount to be transferred.",
                "visibility": "public",
                "lineNumber": 64
            },
            {
                "name": "approve",
                "signature": "approve(address spender, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\nBeware that changing an allowance with this method brings the risk that someone may use both the old\nand the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\nrace condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n@param spender The address which will spend the funds.\n@param value The amount of tokens to be spent.",
                "visibility": "public",
                "lineNumber": 84
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Transfer tokens from one address to another\n@param from address The address which you want to send tokens from\n@param to address The address which you want to transfer to\n@param value uint256 the amount of tokens to be transferred",
                "visibility": "public",
                "lineNumber": 101
            }
        ]
    },
    "contracts/Proxyable.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Proxyable"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy) internal",
                "returns": "()",
                "events": [
                    "ProxyUpdated"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 20
            },
            {
                "name": "setProxy",
                "signature": "setProxy(address payable _proxy) external",
                "returns": "()",
                "events": [
                    "ProxyUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 28
            },
            {
                "name": "setIntegrationProxy",
                "signature": "setIntegrationProxy(address payable _integrationProxy) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 33
            },
            {
                "name": "setMessageSender",
                "signature": "setMessageSender(address sender) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 37
            }
        ],
        "events": [
            {
                "name": "ProxyUpdated",
                "parameters": "(address proxyAddress)",
                "lineNumber": 61
            }
        ],
        "variables": [
            {
                "name": "proxy",
                "type": "contract Proxy",
                "lineNumber": 12,
                "visibility": "public"
            },
            {
                "name": "integrationProxy",
                "type": "contract Proxy",
                "lineNumber": 13,
                "visibility": "public"
            },
            {
                "name": "messageSender",
                "type": "address",
                "lineNumber": 18,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyProxy",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 41
            },
            {
                "name": "optionalProxy",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 46
            },
            {
                "name": "optionalProxy_onlyOwner",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 53
            }
        ]
    },
    "contracts/PurgeableSynth.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "PurgeableSynth"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _tokenName, string _tokenSymbol, address payable _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Synth"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 20
            },
            {
                "name": "exchangeRates",
                "signature": "exchangeRates() internal",
                "returns": "(contract IExchangeRates)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 35
            },
            {
                "name": "purge",
                "signature": "purge(address[] addresses) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Function that allows owner to exchange any number of holders back to sUSD (for frozen or deprecated synths)\n@param addresses The list of holders to purge",
                "visibility": "external",
                "lineNumber": 45
            },
            {
                "name": "emitPurged",
                "signature": "emitPurged(address account, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 72
            }
        ],
        "events": [
            {
                "name": "Purged",
                "parameters": "(address account, uint256 value)",
                "lineNumber": 69
            }
        ],
        "variables": [
            {
                "name": "maxSupplyToPurgeInUSD",
                "type": "uint256",
                "lineNumber": 14,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_EXRATES",
                "type": "bytes32",
                "lineNumber": 16,
                "visibility": "private"
            },
            {
                "name": "PURGED_SIG",
                "type": "bytes32",
                "lineNumber": 70,
                "visibility": "private"
            }
        ]
    },
    "contracts/RewardEscrow.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "RewardEscrow"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, contract ISynthetix _synthetix, contract IFeePool _feePool) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 40
            },
            {
                "name": "setSynthetix",
                "signature": "setSynthetix(contract ISynthetix _synthetix) external",
                "returns": "()",
                "events": [
                    "SynthetixUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice set the synthetix contract address as we need to transfer SNX when the user vests",
                "visibility": "external",
                "lineNumber": 54
            },
            {
                "name": "setFeePool",
                "signature": "setFeePool(contract IFeePool _feePool) external",
                "returns": "()",
                "events": [
                    "FeePoolUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice set the FeePool contract as it is the only authority to be able to call\nappendVestingEntry with the onlyFeePool modifer",
                "visibility": "external",
                "lineNumber": 63
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.",
                "visibility": "public",
                "lineNumber": 73
            },
            {
                "name": "numVestingEntries",
                "signature": "numVestingEntries(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The number of vesting dates in an account's schedule.",
                "visibility": "public",
                "lineNumber": 80
            },
            {
                "name": "getVestingScheduleEntry",
                "signature": "getVestingScheduleEntry(address account, uint256 index) public",
                "returns": "(uint256[2])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get a particular schedule entry for an account.\n@return A pair of uints: (timestamp, synthetix quantity).",
                "visibility": "public",
                "lineNumber": 88
            },
            {
                "name": "getVestingTime",
                "signature": "getVestingTime(address account, uint256 index) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get the time at which a given schedule entry will vest.",
                "visibility": "public",
                "lineNumber": 95
            },
            {
                "name": "getVestingQuantity",
                "signature": "getVestingQuantity(address account, uint256 index) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get the quantity of SNX associated with a given schedule entry.",
                "visibility": "public",
                "lineNumber": 102
            },
            {
                "name": "getNextVestingIndex",
                "signature": "getNextVestingIndex(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the index of the next schedule entry that will vest for a given user.",
                "visibility": "public",
                "lineNumber": 109
            },
            {
                "name": "getNextVestingEntry",
                "signature": "getNextVestingEntry(address account) public",
                "returns": "(uint256[2])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the next schedule entry that will vest for a given user.\n@return A pair of uints: (timestamp, synthetix quantity). ",
                "visibility": "public",
                "lineNumber": 122
            },
            {
                "name": "getNextVestingTime",
                "signature": "getNextVestingTime(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the time at which the next schedule entry will vest for a given user.",
                "visibility": "external",
                "lineNumber": 133
            },
            {
                "name": "getNextVestingQuantity",
                "signature": "getNextVestingQuantity(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the quantity which the next schedule entry will vest for a given user.",
                "visibility": "external",
                "lineNumber": 140
            },
            {
                "name": "checkAccountSchedule",
                "signature": "checkAccountSchedule(address account) public",
                "returns": "(uint256[520])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice return the full vesting schedule entries vest for a given user.\n@dev For DApps to display the vesting schedule for the\ninflationary supply over 5 years. Solidity cant return variable length arrays\nso this is returning pairs of data. Vesting Time at [0] and quantity at [1] and so on",
                "visibility": "public",
                "lineNumber": 150
            },
            {
                "name": "appendVestingEntry",
                "signature": "appendVestingEntry(address account, uint256 quantity) public",
                "returns": "()",
                "events": [
                    "VestingEntryCreated"
                ],
                "modifiers": [
                    "onlyFeePool"
                ],
                "documentation": "@notice Add a new vesting entry at a given time and quantity to an account's schedule.\n@dev A call to this should accompany a previous successful call to synthetix.transfer(rewardEscrow, amount),\nto ensure that when the funds are withdrawn, there is enough balance.\nNote; although this function could technically be used to produce unbounded\narrays, it's only withinn the 4 year period of the weekly inflation schedule.\n@param account The account to append a new vesting entry to.\n@param quantity The quantity of SNX that will be escrowed.",
                "visibility": "public",
                "lineNumber": 172
            },
            {
                "name": "vest",
                "signature": "vest() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Allow a user to withdraw any SNX in their schedule that have vested.",
                "visibility": "external",
                "lineNumber": 210
            }
        ],
        "events": [
            {
                "name": "SynthetixUpdated",
                "parameters": "(address newSynthetix)",
                "lineNumber": 248
            },
            {
                "name": "FeePoolUpdated",
                "parameters": "(address newFeePool)",
                "lineNumber": 250
            },
            {
                "name": "Vested",
                "parameters": "(address beneficiary, uint256 time, uint256 value)",
                "lineNumber": 252
            },
            {
                "name": "VestingEntryCreated",
                "parameters": "(address beneficiary, uint256 time, uint256 value)",
                "lineNumber": 254
            }
        ],
        "variables": [
            {
                "name": "synthetix",
                "type": "contract ISynthetix",
                "lineNumber": 14,
                "visibility": "public"
            },
            {
                "name": "feePool",
                "type": "contract IFeePool",
                "lineNumber": 16,
                "visibility": "public"
            },
            {
                "name": "vestingSchedules",
                "type": "mapping(address => uint256[2][])",
                "lineNumber": 20,
                "visibility": "public"
            },
            {
                "name": "totalEscrowedAccountBalance",
                "type": "mapping(address => uint256)",
                "lineNumber": 23,
                "visibility": "public"
            },
            {
                "name": "totalVestedAccountBalance",
                "type": "mapping(address => uint256)",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "totalEscrowedBalance",
                "type": "uint256",
                "lineNumber": 29,
                "visibility": "public"
            },
            {
                "name": "TIME_INDEX",
                "type": "uint256",
                "lineNumber": 31,
                "visibility": "internal"
            },
            {
                "name": "QUANTITY_INDEX",
                "type": "uint256",
                "lineNumber": 32,
                "visibility": "internal"
            },
            {
                "name": "MAX_VESTING_ENTRIES",
                "type": "uint256",
                "lineNumber": 36,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyFeePool",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 239
            }
        ]
    },
    "contracts/RewardsDistribution.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "RewardsDistribution"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _authority, address _synthetixProxy, address _rewardEscrow, address _feePoolProxy) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": "@dev _authority maybe the underlying synthetix contract.\nRemember to set the autority on a synthetix upgrade",
                "visibility": "public",
                "lineNumber": 53
            },
            {
                "name": "setSynthetixProxy",
                "signature": "setSynthetixProxy(address _synthetixProxy) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 68
            },
            {
                "name": "setRewardEscrow",
                "signature": "setRewardEscrow(address _rewardEscrow) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 72
            },
            {
                "name": "setFeePoolProxy",
                "signature": "setFeePoolProxy(address _feePoolProxy) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 76
            },
            {
                "name": "setAuthority",
                "signature": "setAuthority(address _authority) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the address of the contract authorised to call distributeRewards()\n@param _authority Address of the authorised calling contract.",
                "visibility": "external",
                "lineNumber": 84
            },
            {
                "name": "addRewardDistribution",
                "signature": "addRewardDistribution(address destination, uint256 amount) external",
                "returns": "(bool)",
                "events": [
                    "RewardDistributionAdded"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Adds a Rewards DistributionData struct to the distributions\narray. Any entries here will be iterated and rewards distributed to\neach address when tokens are sent to this contract and distributeRewards()\nis called by the autority.\n@param destination An address to send rewards tokens too\n@param amount The amount of rewards tokens to send",
                "visibility": "external",
                "lineNumber": 98
            },
            {
                "name": "removeRewardDistribution",
                "signature": "removeRewardDistribution(uint256 index) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Deletes a RewardDistribution from the distributions\nso it will no longer be included in the call to distributeRewards()\n@param index The index of the DistributionData to delete",
                "visibility": "external",
                "lineNumber": 114
            },
            {
                "name": "editRewardDistribution",
                "signature": "editRewardDistribution(uint256 index, address destination, uint256 amount) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Edits a RewardDistribution in the distributions array.\n@param index The index of the DistributionData to edit\n@param destination The destination address. Send the same address to keep or different address to change it.\n@param amount The amount of tokens to edit. Send the same number to keep or change the amount of tokens to send.",
                "visibility": "external",
                "lineNumber": 135
            },
            {
                "name": "distributeRewards",
                "signature": "distributeRewards(uint256 amount) external",
                "returns": "(bool)",
                "events": [
                    "RewardsDistributed"
                ],
                "modifiers": [],
                "documentation": "@notice Iterates the distributions sending set out amounts of\ntokens to the specified address. The remainder is then sent to the RewardEscrow Contract\nand applied to the FeePools staking rewards.\n@param amount The total number of tokens being distributed",
                "visibility": "external",
                "lineNumber": 155
            },
            {
                "name": "distributionsLength",
                "signature": "distributionsLength() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the length of the distributions array",
                "visibility": "external",
                "lineNumber": 203
            }
        ],
        "events": [
            {
                "name": "RewardDistributionAdded",
                "parameters": "(uint256 index, address destination, uint256 amount)",
                "lineNumber": 209
            },
            {
                "name": "RewardsDistributed",
                "parameters": "(uint256 amount)",
                "lineNumber": 210
            }
        ],
        "variables": [
            {
                "name": "authority",
                "type": "address",
                "lineNumber": 18,
                "visibility": "public"
            },
            {
                "name": "synthetixProxy",
                "type": "address",
                "lineNumber": 23,
                "visibility": "public"
            },
            {
                "name": "rewardEscrow",
                "type": "address",
                "lineNumber": 28,
                "visibility": "public"
            },
            {
                "name": "feePoolProxy",
                "type": "address",
                "lineNumber": 33,
                "visibility": "public"
            },
            {
                "name": "distributions",
                "type": "struct RewardsDistribution.DistributionData[]",
                "lineNumber": 47,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "DistributionData",
                "members": [
                    {
                        "name": "destination",
                        "type": "address"
                    },
                    {
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 39
            }
        ]
    },
    "contracts/RewardsDistributionRecipient.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "RewardsDistributionRecipient"
            }
        ],
        "functions": [
            {
                "name": "notifyRewardAmount",
                "signature": "notifyRewardAmount(uint256 reward) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 10
            },
            {
                "name": "setRewardsDistribution",
                "signature": "setRewardsDistribution(address _rewardsDistribution) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            }
        ],
        "variables": [
            {
                "name": "rewardsDistribution",
                "type": "address",
                "lineNumber": 8,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyRewardsDistribution",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 12
            }
        ]
    },
    "contracts/SafeDecimalMath.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SafeDecimalMath"
            }
        ],
        "functions": [
            {
                "name": "unit",
                "signature": "unit() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return Provides an interface to UNIT.",
                "visibility": "external",
                "lineNumber": 24
            },
            {
                "name": "preciseUnit",
                "signature": "preciseUnit() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return Provides an interface to PRECISE_UNIT.",
                "visibility": "external",
                "lineNumber": 31
            },
            {
                "name": "multiplyDecimal",
                "signature": "multiplyDecimal(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of multiplying x and y, interpreting the operands as fixed-point\ndecimals.\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\nso that product must be less than 2**256. As this is an integer division,\nthe internal division always rounds down. This helps save on gas. Rounding\nis more expensive on gas.",
                "visibility": "internal",
                "lineNumber": 44
            },
            {
                "name": "_multiplyDecimalRound",
                "signature": "_multiplyDecimalRound(uint256 x, uint256 y, uint256 precisionUnit) private",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely multiplying x and y, interpreting the operands\nas fixed-point decimals of the specified precision unit.\n     * @dev The operands should be in the form of a the specified unit factor which will be\ndivided out after the product of x and y is evaluated, so that product must be\nless than 2**256.\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\nRounding is useful when you need to retain fidelity for small decimal numbers\n(eg. small fractions or percentages).",
                "visibility": "private",
                "lineNumber": 61
            },
            {
                "name": "multiplyDecimalRoundPrecise",
                "signature": "multiplyDecimalRoundPrecise(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely multiplying x and y, interpreting the operands\nas fixed-point decimals of a precise unit.\n     * @dev The operands should be in the precise unit factor which will be\ndivided out after the product of x and y is evaluated, so that product must be\nless than 2**256.\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\nRounding is useful when you need to retain fidelity for small decimal numbers\n(eg. small fractions or percentages).",
                "visibility": "internal",
                "lineNumber": 88
            },
            {
                "name": "multiplyDecimalRound",
                "signature": "multiplyDecimalRound(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely multiplying x and y, interpreting the operands\nas fixed-point decimals of a standard unit.\n     * @dev The operands should be in the standard unit factor which will be\ndivided out after the product of x and y is evaluated, so that product must be\nless than 2**256.\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\nRounding is useful when you need to retain fidelity for small decimal numbers\n(eg. small fractions or percentages).",
                "visibility": "internal",
                "lineNumber": 104
            },
            {
                "name": "divideDecimal",
                "signature": "divideDecimal(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely dividing x and y. The return value is a high\nprecision decimal.\n     * @dev y is divided after the product of x and the standard precision unit\nis evaluated, so the product of x and UNIT must be less than 2**256. As\nthis is an integer division, the result is always rounded down.\nThis helps save on gas. Rounding is more expensive on gas.",
                "visibility": "internal",
                "lineNumber": 117
            },
            {
                "name": "_divideDecimalRound",
                "signature": "_divideDecimalRound(uint256 x, uint256 y, uint256 precisionUnit) private",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely dividing x and y. The return value is as a rounded\ndecimal in the precision unit specified in the parameter.\n     * @dev y is divided after the product of x and the specified precision unit\nis evaluated, so the product of x and the specified precision unit must\nbe less than 2**256. The result is rounded to the nearest increment.",
                "visibility": "private",
                "lineNumber": 130
            },
            {
                "name": "divideDecimalRound",
                "signature": "divideDecimalRound(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely dividing x and y. The return value is as a rounded\nstandard precision decimal.\n     * @dev y is divided after the product of x and the standard precision unit\nis evaluated, so the product of x and the standard precision unit must\nbe less than 2**256. The result is rounded to the nearest increment.",
                "visibility": "internal",
                "lineNumber": 152
            },
            {
                "name": "divideDecimalRoundPrecise",
                "signature": "divideDecimalRoundPrecise(uint256 x, uint256 y) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The result of safely dividing x and y. The return value is as a rounded\nhigh precision decimal.\n     * @dev y is divided after the product of x and the high precision unit\nis evaluated, so the product of x and the high precision unit must\nbe less than 2**256. The result is rounded to the nearest increment.",
                "visibility": "internal",
                "lineNumber": 164
            },
            {
                "name": "decimalToPreciseDecimal",
                "signature": "decimalToPreciseDecimal(uint256 i) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Convert a standard decimal representation to a high precision one.",
                "visibility": "internal",
                "lineNumber": 171
            },
            {
                "name": "preciseDecimalToDecimal",
                "signature": "preciseDecimalToDecimal(uint256 i) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Convert a high precision decimal to a standard decimal representation.",
                "visibility": "internal",
                "lineNumber": 178
            }
        ],
        "variables": [
            {
                "name": "decimals",
                "type": "uint8",
                "lineNumber": 11,
                "visibility": "public"
            },
            {
                "name": "highPrecisionDecimals",
                "type": "uint8",
                "lineNumber": 12,
                "visibility": "public"
            },
            {
                "name": "UNIT",
                "type": "uint256",
                "lineNumber": 15,
                "visibility": "public"
            },
            {
                "name": "PRECISE_UNIT",
                "type": "uint256",
                "lineNumber": 18,
                "visibility": "public"
            },
            {
                "name": "UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR",
                "type": "uint256",
                "lineNumber": 19,
                "visibility": "private"
            }
        ]
    },
    "contracts/SelfDestructible.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SelfDestructible"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "() internal",
                "returns": "()",
                "events": [
                    "SelfDestructBeneficiaryUpdated"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 15
            },
            {
                "name": "setSelfDestructBeneficiary",
                "signature": "setSelfDestructBeneficiary(address payable _beneficiary) external",
                "returns": "()",
                "events": [
                    "SelfDestructBeneficiaryUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the beneficiary address of this contract.\n@dev Only the contract owner may call this. The provided beneficiary must be non-null.\n@param _beneficiary The address to pay any eth contained in this contract to upon self-destruction.",
                "visibility": "external",
                "lineNumber": 27
            },
            {
                "name": "initiateSelfDestruct",
                "signature": "initiateSelfDestruct() external",
                "returns": "()",
                "events": [
                    "SelfDestructInitiated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Begin the self-destruction counter of this contract.\nOnce the delay has elapsed, the contract may be self-destructed.\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 38
            },
            {
                "name": "terminateSelfDestruct",
                "signature": "terminateSelfDestruct() external",
                "returns": "()",
                "events": [
                    "SelfDestructTerminated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Terminate and reset the self-destruction timer.\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 48
            },
            {
                "name": "selfDestruct",
                "signature": "selfDestruct() external",
                "returns": "()",
                "events": [
                    "SelfDestructed"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice If the self-destruction delay has elapsed, destroy this contract and\nremit any ether it owns to the beneficiary address.\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 59
            }
        ],
        "events": [
            {
                "name": "SelfDestructTerminated",
                "parameters": "()",
                "lineNumber": 66
            },
            {
                "name": "SelfDestructed",
                "parameters": "(address beneficiary)",
                "lineNumber": 67
            },
            {
                "name": "SelfDestructInitiated",
                "parameters": "(uint256 selfDestructDelay)",
                "lineNumber": 68
            },
            {
                "name": "SelfDestructBeneficiaryUpdated",
                "parameters": "(address newBeneficiary)",
                "lineNumber": 69
            }
        ],
        "variables": [
            {
                "name": "SELFDESTRUCT_DELAY",
                "type": "uint256",
                "lineNumber": 8,
                "visibility": "public"
            },
            {
                "name": "initiationTime",
                "type": "uint256",
                "lineNumber": 10,
                "visibility": "public"
            },
            {
                "name": "selfDestructInitiated",
                "type": "bool",
                "lineNumber": 11,
                "visibility": "public"
            },
            {
                "name": "selfDestructBeneficiary",
                "type": "address",
                "lineNumber": 13,
                "visibility": "public"
            }
        ]
    },
    "contracts/State.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "State"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _associatedContract) internal",
                "returns": "()",
                "events": [
                    "AssociatedContractUpdated"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 12
            },
            {
                "name": "setAssociatedContract",
                "signature": "setAssociatedContract(address _associatedContract) external",
                "returns": "()",
                "events": [
                    "AssociatedContractUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 23
            }
        ],
        "events": [
            {
                "name": "AssociatedContractUpdated",
                "parameters": "(address associatedContract)",
                "lineNumber": 37
            }
        ],
        "variables": [
            {
                "name": "associatedContract",
                "type": "address",
                "lineNumber": 10,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlyAssociatedContract",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 30
            }
        ]
    },
    "contracts/SupplySchedule.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SupplySchedule"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, uint256 _lastMintEvent, uint256 _currentWeek) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 50
            },
            {
                "name": "mintableSupply",
                "signature": "mintableSupply() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return The amount of SNX mintable for the inflationary supply",
                "visibility": "external",
                "lineNumber": 64
            },
            {
                "name": "tokenDecaySupplyForWeek",
                "signature": "tokenDecaySupplyForWeek(uint256 counter) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n@dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()",
                "visibility": "public",
                "lineNumber": 109
            },
            {
                "name": "terminalInflationSupply",
                "signature": "terminalInflationSupply(uint256 totalSupply, uint256 numOfWeeks) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@return A unit amount of terminal inflation supply\n@dev Weekly compound rate based on number of weeks",
                "visibility": "public",
                "lineNumber": 122
            },
            {
                "name": "weeksSinceLastIssuance",
                "signature": "weeksSinceLastIssuance() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n@return Calculate the numberOfWeeks since last mint rounded down to 1 week",
                "visibility": "public",
                "lineNumber": 134
            },
            {
                "name": "isMintable",
                "signature": "isMintable() public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@return boolean whether the MINT_PERIOD_DURATION (7 days)\nhas passed since the lastMintEvent.\n",
                "visibility": "public",
                "lineNumber": 145
            },
            {
                "name": "recordMintEvent",
                "signature": "recordMintEvent(uint256 supplyMinted) external",
                "returns": "(bool)",
                "events": [
                    "SupplyMinted"
                ],
                "modifiers": [
                    "onlySynthetix"
                ],
                "documentation": "@notice Record the mint event from Synthetix by incrementing the inflation\nweek counter for the number of weeks minted (probabaly always 1)\nand store the time of the event.\n@param supplyMinted the amount of SNX the total supply was inflated by.\n",
                "visibility": "external",
                "lineNumber": 160
            },
            {
                "name": "setMinterReward",
                "signature": "setMinterReward(uint256 amount) external",
                "returns": "()",
                "events": [
                    "MinterRewardUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Sets the reward amount of SNX for the caller of the public\nfunction Synthetix.mint().\nThis incentivises anyone to mint the inflationary supply and the mintr\nReward will be deducted from the inflationary supply and sent to the caller.\n@param amount the amount of SNX to reward the minter.\n",
                "visibility": "external",
                "lineNumber": 181
            },
            {
                "name": "setSynthetixProxy",
                "signature": "setSynthetixProxy(contract ISynthetix _synthetixProxy) external",
                "returns": "()",
                "events": [
                    "SynthetixProxyUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the SynthetixProxy should it ever change.\nSupplySchedule requires Synthetix address as it has the authority\nto record mint event.\n",
                "visibility": "external",
                "lineNumber": 194
            }
        ],
        "events": [
            {
                "name": "SupplyMinted",
                "parameters": "(uint256 supplyMinted, uint256 numberOfWeeksIssued, uint256 lastMintEvent, uint256 timestamp)",
                "lineNumber": 217
            },
            {
                "name": "MinterRewardUpdated",
                "parameters": "(uint256 newRewardAmount)",
                "lineNumber": 222
            },
            {
                "name": "SynthetixProxyUpdated",
                "parameters": "(address newAddress)",
                "lineNumber": 227
            }
        ],
        "variables": [
            {
                "name": "lastMintEvent",
                "type": "uint256",
                "lineNumber": 18,
                "visibility": "public"
            },
            {
                "name": "weekCounter",
                "type": "uint256",
                "lineNumber": 21,
                "visibility": "public"
            },
            {
                "name": "minterReward",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "INITIAL_WEEKLY_SUPPLY",
                "type": "uint256",
                "lineNumber": 28,
                "visibility": "public"
            },
            {
                "name": "synthetixProxy",
                "type": "address payable",
                "lineNumber": 31,
                "visibility": "public"
            },
            {
                "name": "MAX_MINTER_REWARD",
                "type": "uint256",
                "lineNumber": 34,
                "visibility": "public"
            },
            {
                "name": "MINT_PERIOD_DURATION",
                "type": "uint256",
                "lineNumber": 37,
                "visibility": "public"
            },
            {
                "name": "INFLATION_START_DATE",
                "type": "uint256",
                "lineNumber": 39,
                "visibility": "public"
            },
            {
                "name": "MINT_BUFFER",
                "type": "uint256",
                "lineNumber": 40,
                "visibility": "public"
            },
            {
                "name": "SUPPLY_DECAY_START",
                "type": "uint8",
                "lineNumber": 41,
                "visibility": "public"
            },
            {
                "name": "SUPPLY_DECAY_END",
                "type": "uint8",
                "lineNumber": 42,
                "visibility": "public"
            },
            {
                "name": "DECAY_RATE",
                "type": "uint256",
                "lineNumber": 45,
                "visibility": "public"
            },
            {
                "name": "TERMINAL_SUPPLY_RATE_ANNUAL",
                "type": "uint256",
                "lineNumber": 48,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "onlySynthetix",
                "parameters": "()",
                "documentation": "@notice Only the Synthetix contract is authorised to call this function\n",
                "visibility": "internal",
                "lineNumber": 205
            }
        ]
    },
    "contracts/Synth.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Synth"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "ExternStateToken",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 42
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 64
            },
            {
                "name": "transferAndSettle",
                "signature": "transferAndSettle(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 80
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 98
            },
            {
                "name": "transferFromAndSettle",
                "signature": "transferFromAndSettle(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 108
            },
            {
                "name": "_transferToFeeAddress",
                "signature": "_transferToFeeAddress(address to, uint256 value) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice _transferToFeeAddress function\nnon-sUSD synths are exchanged into sUSD via synthInitiatedExchange\nnotify feePool to record amount as fee paid to feePool ",
                "visibility": "internal",
                "lineNumber": 134
            },
            {
                "name": "issue",
                "signature": "issue(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyInternalContracts"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 154
            },
            {
                "name": "burn",
                "signature": "burn(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyInternalContracts"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 160
            },
            {
                "name": "_internalIssue",
                "signature": "_internalIssue(address account, uint256 amount) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 164
            },
            {
                "name": "_internalBurn",
                "signature": "_internalBurn(address account, uint256 amount) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 171
            },
            {
                "name": "setTotalSupply",
                "signature": "setTotalSupply(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 181
            },
            {
                "name": "systemStatus",
                "signature": "systemStatus() internal",
                "returns": "(contract ISystemStatus)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 186
            },
            {
                "name": "synthetix",
                "signature": "synthetix() internal",
                "returns": "(contract ISynthetix)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 190
            },
            {
                "name": "feePool",
                "signature": "feePool() internal",
                "returns": "(contract IFeePool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 194
            },
            {
                "name": "exchanger",
                "signature": "exchanger() internal",
                "returns": "(contract IExchanger)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 198
            },
            {
                "name": "issuer",
                "signature": "issuer() internal",
                "returns": "(contract IIssuer)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 202
            },
            {
                "name": "_ensureCanTransfer",
                "signature": "_ensureCanTransfer(address from, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 206
            },
            {
                "name": "transferableSynths",
                "signature": "transferableSynths(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 212
            },
            {
                "name": "_internalTransferFrom",
                "signature": "_internalTransferFrom(address from, address to, uint256 value) internal",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 229
            },
            {
                "name": "emitIssued",
                "signature": "emitIssued(address account, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 263
            },
            {
                "name": "emitBurned",
                "signature": "emitBurned(address account, uint256 value) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 270
            }
        ],
        "events": [
            {
                "name": "Issued",
                "parameters": "(address account, uint256 value)",
                "lineNumber": 260
            },
            {
                "name": "Burned",
                "parameters": "(address account, uint256 value)",
                "lineNumber": 267
            }
        ],
        "variables": [
            {
                "name": "currencyKey",
                "type": "bytes32",
                "lineNumber": 17,
                "visibility": "public"
            },
            {
                "name": "DECIMALS",
                "type": "uint8",
                "lineNumber": 19,
                "visibility": "public"
            },
            {
                "name": "FEE_ADDRESS",
                "type": "address",
                "lineNumber": 22,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYSTEMSTATUS",
                "type": "bytes32",
                "lineNumber": 26,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIX",
                "type": "bytes32",
                "lineNumber": 27,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXCHANGER",
                "type": "bytes32",
                "lineNumber": 28,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_ISSUER",
                "type": "bytes32",
                "lineNumber": 29,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOL",
                "type": "bytes32",
                "lineNumber": 30,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 32,
                "visibility": "internal"
            },
            {
                "name": "ISSUED_SIG",
                "type": "bytes32",
                "lineNumber": 261,
                "visibility": "private"
            },
            {
                "name": "BURNED_SIG",
                "type": "bytes32",
                "lineNumber": 268,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "onlyInternalContracts",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 246
            }
        ]
    },
    "contracts/Synthetix.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "Synthetix"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, address _owner, uint256 _totalSupply, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "ExternStateToken",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 63
            },
            {
                "name": "systemStatus",
                "signature": "systemStatus() internal",
                "returns": "(contract ISystemStatus)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 77
            },
            {
                "name": "exchanger",
                "signature": "exchanger() internal",
                "returns": "(contract IExchanger)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 81
            },
            {
                "name": "etherCollateral",
                "signature": "etherCollateral() internal",
                "returns": "(contract IEtherCollateral)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 85
            },
            {
                "name": "issuer",
                "signature": "issuer() internal",
                "returns": "(contract IIssuer)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 89
            },
            {
                "name": "synthetixState",
                "signature": "synthetixState() internal",
                "returns": "(contract ISynthetixState)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 93
            },
            {
                "name": "exchangeRates",
                "signature": "exchangeRates() internal",
                "returns": "(contract IExchangeRates)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 97
            },
            {
                "name": "feePool",
                "signature": "feePool() internal",
                "returns": "(contract IFeePool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 101
            },
            {
                "name": "supplySchedule",
                "signature": "supplySchedule() internal",
                "returns": "(contract SupplySchedule)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 105
            },
            {
                "name": "rewardEscrow",
                "signature": "rewardEscrow() internal",
                "returns": "(contract ISynthetixEscrow)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 109
            },
            {
                "name": "synthetixEscrow",
                "signature": "synthetixEscrow() internal",
                "returns": "(contract ISynthetixEscrow)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 113
            },
            {
                "name": "rewardsDistribution",
                "signature": "rewardsDistribution() internal",
                "returns": "(contract IRewardsDistribution)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 117
            },
            {
                "name": "_totalIssuedSynths",
                "signature": "_totalIssuedSynths(bytes32 currencyKey, bool excludeEtherCollateral) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Total amount of synths issued by the system, priced in currencyKey\n@param currencyKey The currency to value the synths in",
                "visibility": "internal",
                "lineNumber": 126
            },
            {
                "name": "totalIssuedSynths",
                "signature": "totalIssuedSynths(bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Total amount of synths issued by the system priced in currencyKey\n@param currencyKey The currency to value the synths in",
                "visibility": "public",
                "lineNumber": 157
            },
            {
                "name": "totalIssuedSynthsExcludeEtherCollateral",
                "signature": "totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Total amount of synths issued by the system priced in currencyKey, excluding ether collateral\n@param currencyKey The currency to value the synths in",
                "visibility": "public",
                "lineNumber": 165
            },
            {
                "name": "availableCurrencyKeys",
                "signature": "availableCurrencyKeys() public",
                "returns": "(bytes32[])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Returns the currencyKeys of availableSynths for rate checking",
                "visibility": "public",
                "lineNumber": 172
            },
            {
                "name": "availableSynthCount",
                "signature": "availableSynthCount() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Returns the count of available synths in the system, which you can use to iterate availableSynths",
                "visibility": "public",
                "lineNumber": 185
            },
            {
                "name": "isWaitingPeriod",
                "signature": "isWaitingPeriod(bytes32 currencyKey) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 189
            },
            {
                "name": "addSynth",
                "signature": "addSynth(contract Synth synth) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Add an associated Synth contract to the Synthetix system\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 199
            },
            {
                "name": "removeSynth",
                "signature": "removeSynth(bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy_onlyOwner"
                ],
                "documentation": "@notice Remove an associated Synth contract from the Synthetix system\n@dev Only the contract owner may call this.",
                "visibility": "external",
                "lineNumber": 214
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": "@notice ERC20 transfer function.",
                "visibility": "public",
                "lineNumber": 251
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": "@notice ERC20 transferFrom function.",
                "visibility": "public",
                "lineNumber": 266
            },
            {
                "name": "issueSynths",
                "signature": "issueSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 281
            },
            {
                "name": "issueSynthsOnBehalf",
                "signature": "issueSynthsOnBehalf(address issueForAddress, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 287
            },
            {
                "name": "issueMaxSynths",
                "signature": "issueMaxSynths() external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 293
            },
            {
                "name": "issueMaxSynthsOnBehalf",
                "signature": "issueMaxSynthsOnBehalf(address issueForAddress) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 299
            },
            {
                "name": "burnSynths",
                "signature": "burnSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 305
            },
            {
                "name": "burnSynthsOnBehalf",
                "signature": "burnSynthsOnBehalf(address burnForAddress, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 311
            },
            {
                "name": "burnSynthsToTarget",
                "signature": "burnSynthsToTarget() external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 317
            },
            {
                "name": "burnSynthsToTargetOnBehalf",
                "signature": "burnSynthsToTargetOnBehalf(address burnForAddress) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 323
            },
            {
                "name": "exchange",
                "signature": "exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 329
            },
            {
                "name": "exchangeOnBehalf",
                "signature": "exchangeOnBehalf(address exchangeForAddress, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 341
            },
            {
                "name": "settle",
                "signature": "settle(bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 361
            },
            {
                "name": "maxIssuableSynths",
                "signature": "maxIssuableSynths(address _issuer) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The maximum synths an issuer can issue against their total synthetix quantity.\nThis ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.",
                "visibility": "public",
                "lineNumber": 379
            },
            {
                "name": "collateralisationRatio",
                "signature": "collateralisationRatio(address _issuer) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The current collateralisation ratio for a user. Collateralisation ratio varies over time\nas the value of the underlying Synthetix asset changes,\ne.g. based on an issuance ratio of 20%. if a user issues their maximum available\nsynths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value\nof Synthetix changes, the ratio returned by this function will adjust accordingly. Users are\nincentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by\naltering the amount of fees they're able to claim from the system.",
                "visibility": "public",
                "lineNumber": 403
            },
            {
                "name": "debtBalanceOf",
                "signature": "debtBalanceOf(address _issuer, bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice If a user issues synths backed by SNX in their wallet, the SNX become locked. This function\nwill tell you how many synths a user has to give back to the system in order to unlock their original\ndebt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price\nthe debt in sUSD, or any other synth you wish.",
                "visibility": "public",
                "lineNumber": 417
            },
            {
                "name": "debtBalanceOfAndTotalDebt",
                "signature": "debtBalanceOfAndTotalDebt(address _issuer, bytes32 currencyKey) public",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 437
            },
            {
                "name": "remainingIssuableSynths",
                "signature": "remainingIssuableSynths(address _issuer) public",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The remaining synths an issuer can issue against their total synthetix balance.\n@param _issuer The account that intends to issue",
                "visibility": "public",
                "lineNumber": 475
            },
            {
                "name": "collateral",
                "signature": "collateral(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The total SNX owned by this account, both escrowed and unescrowed,\nagainst which synths can be issued.\nThis includes those already being used as collateral (locked), and those\navailable for further issuance (unlocked).",
                "visibility": "public",
                "lineNumber": 501
            },
            {
                "name": "transferableSynthetix",
                "signature": "transferableSynthetix(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "rateNotStale"
                ],
                "documentation": "@notice The number of SNX that are free to be transferred for an account.\n@dev Escrowed SNX are not transferable, so they are not included\nin this calculation.\n@notice SNX rate not stale is checked within debtBalanceOf",
                "visibility": "public",
                "lineNumber": 521
            },
            {
                "name": "mint",
                "signature": "mint() external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Mints the inflationary SNX supply. The inflation shedule is\ndefined in the SupplySchedule contract.\nThe mint() function is publicly callable by anyone. The caller will\nreceive a minter reward as specified in supplySchedule.minterReward().",
                "visibility": "external",
                "lineNumber": 552
            },
            {
                "name": "emitSynthExchange",
                "signature": "emitSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyExchanger"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 617
            },
            {
                "name": "emitExchangeReclaim",
                "signature": "emitExchangeReclaim(address account, bytes32 currencyKey, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyExchanger"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 638
            },
            {
                "name": "emitExchangeRebate",
                "signature": "emitExchangeRebate(address account, bytes32 currencyKey, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyExchanger"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 649
            }
        ],
        "events": [
            {
                "name": "SynthExchange",
                "parameters": "(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                "lineNumber": 605
            },
            {
                "name": "ExchangeReclaim",
                "parameters": "(address account, bytes32 currencyKey, uint256 amount)",
                "lineNumber": 635
            },
            {
                "name": "ExchangeRebate",
                "parameters": "(address account, bytes32 currencyKey, uint256 amount)",
                "lineNumber": 646
            }
        ],
        "variables": [
            {
                "name": "availableSynths",
                "type": "contract Synth[]",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "synths",
                "type": "mapping(bytes32 => contract Synth)",
                "lineNumber": 25,
                "visibility": "public"
            },
            {
                "name": "synthsByAddress",
                "type": "mapping(address => bytes32)",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "TOKEN_NAME",
                "type": "string",
                "lineNumber": 28,
                "visibility": "public"
            },
            {
                "name": "TOKEN_SYMBOL",
                "type": "string",
                "lineNumber": 29,
                "visibility": "public"
            },
            {
                "name": "DECIMALS",
                "type": "uint8",
                "lineNumber": 30,
                "visibility": "public"
            },
            {
                "name": "sUSD",
                "type": "bytes32",
                "lineNumber": 31,
                "visibility": "public"
            },
            {
                "name": "CONTRACT_SYSTEMSTATUS",
                "type": "bytes32",
                "lineNumber": 35,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXCHANGER",
                "type": "bytes32",
                "lineNumber": 36,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_ETHERCOLLATERAL",
                "type": "bytes32",
                "lineNumber": 37,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_ISSUER",
                "type": "bytes32",
                "lineNumber": 38,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIXSTATE",
                "type": "bytes32",
                "lineNumber": 39,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXRATES",
                "type": "bytes32",
                "lineNumber": 40,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_FEEPOOL",
                "type": "bytes32",
                "lineNumber": 41,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SUPPLYSCHEDULE",
                "type": "bytes32",
                "lineNumber": 42,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_REWARDESCROW",
                "type": "bytes32",
                "lineNumber": 43,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_SYNTHETIXESCROW",
                "type": "bytes32",
                "lineNumber": 44,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_REWARDSDISTRIBUTION",
                "type": "bytes32",
                "lineNumber": 45,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 47,
                "visibility": "private"
            },
            {
                "name": "SYNTHEXCHANGE_SIG",
                "type": "bytes32",
                "lineNumber": 613,
                "visibility": "internal"
            },
            {
                "name": "EXCHANGERECLAIM_SIG",
                "type": "bytes32",
                "lineNumber": 636,
                "visibility": "internal"
            },
            {
                "name": "EXCHANGEREBATE_SIG",
                "type": "bytes32",
                "lineNumber": 647,
                "visibility": "internal"
            }
        ],
        "modifiers": [
            {
                "name": "rateNotStale",
                "parameters": "(bytes32 currencyKey)",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 593
            },
            {
                "name": "onlyExchanger",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 598
            }
        ]
    },
    "contracts/SynthetixEscrow.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SynthetixEscrow"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, contract ISynthetix _synthetix) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 34
            },
            {
                "name": "setSynthetix",
                "signature": "setSynthetix(contract ISynthetix _synthetix) external",
                "returns": "()",
                "events": [
                    "SynthetixUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 40
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice A simple alias to totalVestedAccountBalance: provides ERC20 balance integration.",
                "visibility": "public",
                "lineNumber": 50
            },
            {
                "name": "numVestingEntries",
                "signature": "numVestingEntries(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice The number of vesting dates in an account's schedule.",
                "visibility": "public",
                "lineNumber": 57
            },
            {
                "name": "getVestingScheduleEntry",
                "signature": "getVestingScheduleEntry(address account, uint256 index) public",
                "returns": "(uint256[2])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get a particular schedule entry for an account.\n@return A pair of uints: (timestamp, synthetix quantity).",
                "visibility": "public",
                "lineNumber": 65
            },
            {
                "name": "getVestingTime",
                "signature": "getVestingTime(address account, uint256 index) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get the time at which a given schedule entry will vest.",
                "visibility": "public",
                "lineNumber": 72
            },
            {
                "name": "getVestingQuantity",
                "signature": "getVestingQuantity(address account, uint256 index) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Get the quantity of SNX associated with a given schedule entry.",
                "visibility": "public",
                "lineNumber": 79
            },
            {
                "name": "getNextVestingIndex",
                "signature": "getNextVestingIndex(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the index of the next schedule entry that will vest for a given user.",
                "visibility": "public",
                "lineNumber": 86
            },
            {
                "name": "getNextVestingEntry",
                "signature": "getNextVestingEntry(address account) public",
                "returns": "(uint256[2])",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the next schedule entry that will vest for a given user.\n@return A pair of uints: (timestamp, synthetix quantity). ",
                "visibility": "public",
                "lineNumber": 99
            },
            {
                "name": "getNextVestingTime",
                "signature": "getNextVestingTime(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the time at which the next schedule entry will vest for a given user.",
                "visibility": "external",
                "lineNumber": 110
            },
            {
                "name": "getNextVestingQuantity",
                "signature": "getNextVestingQuantity(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Obtain the quantity which the next schedule entry will vest for a given user.",
                "visibility": "external",
                "lineNumber": 117
            },
            {
                "name": "withdrawSynthetix",
                "signature": "withdrawSynthetix(uint256 quantity) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Withdraws a quantity of SNX back to the synthetix contract.\n@dev This may only be called by the owner during the contract's setup period.",
                "visibility": "external",
                "lineNumber": 127
            },
            {
                "name": "purgeAccount",
                "signature": "purgeAccount(address account) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Destroy the vesting information associated with an account.",
                "visibility": "external",
                "lineNumber": 134
            },
            {
                "name": "appendVestingEntry",
                "signature": "appendVestingEntry(address account, uint256 time, uint256 quantity) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Add a new vesting entry at a given time and quantity to an account's schedule.\n@dev A call to this should be accompanied by either enough balance already available\nin this contract, or a corresponding call to synthetix.endow(), to ensure that when\nthe funds are withdrawn, there is enough balance, as well as correctly calculating\nthe fees.\nThis may only be called by the owner during the contract's setup period.\nNote; although this function could technically be used to produce unbounded\narrays, it's only in the foundation's command to add to these lists.\n@param account The account to append a new vesting entry to.\n@param time The absolute unix timestamp after which the vested quantity may be withdrawn.\n@param quantity The quantity of SNX that will vest.",
                "visibility": "public",
                "lineNumber": 153
            },
            {
                "name": "addVestingSchedule",
                "signature": "addVestingSchedule(address account, uint256[] times, uint256[] quantities) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner",
                    "onlyDuringSetup"
                ],
                "documentation": "@notice Construct a vesting schedule to release a quantities of SNX\nover a series of intervals.\n@dev Assumes that the quantities are nonzero\nand that the sequence of timestamps is strictly increasing.\nThis may only be called by the owner during the contract's setup period.",
                "visibility": "external",
                "lineNumber": 195
            },
            {
                "name": "vest",
                "signature": "vest() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Allow a user to withdraw any SNX in their schedule that have vested.",
                "visibility": "external",
                "lineNumber": 208
            }
        ],
        "events": [
            {
                "name": "SynthetixUpdated",
                "parameters": "(address newSynthetix)",
                "lineNumber": 236
            },
            {
                "name": "Vested",
                "parameters": "(address beneficiary, uint256 time, uint256 value)",
                "lineNumber": 238
            }
        ],
        "variables": [
            {
                "name": "synthetix",
                "type": "contract ISynthetix",
                "lineNumber": 14,
                "visibility": "public"
            },
            {
                "name": "vestingSchedules",
                "type": "mapping(address => uint256[2][])",
                "lineNumber": 18,
                "visibility": "public"
            },
            {
                "name": "totalVestedAccountBalance",
                "type": "mapping(address => uint256)",
                "lineNumber": 21,
                "visibility": "public"
            },
            {
                "name": "totalVestedBalance",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "TIME_INDEX",
                "type": "uint256",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "QUANTITY_INDEX",
                "type": "uint256",
                "lineNumber": 27,
                "visibility": "public"
            },
            {
                "name": "MAX_VESTING_ENTRIES",
                "type": "uint256",
                "lineNumber": 30,
                "visibility": "public"
            }
        ]
    },
    "contracts/SynthetixState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SynthetixState"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _associatedContract) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "State",
                    "LimitedSetup"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 48
            },
            {
                "name": "setCurrentIssuanceData",
                "signature": "setCurrentIssuanceData(address account, uint256 initialDebtOwnership) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Set issuance data for an address\n@dev Only the associated contract may call this.\n@param account The address to set the data for.\n@param initialDebtOwnership The initial debt ownership for this address.",
                "visibility": "external",
                "lineNumber": 63
            },
            {
                "name": "clearIssuanceData",
                "signature": "clearIssuanceData(address account) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Clear issuance data for an address\n@dev Only the associated contract may call this.\n@param account The address to clear the data for.",
                "visibility": "external",
                "lineNumber": 73
            },
            {
                "name": "incrementTotalIssuerCount",
                "signature": "incrementTotalIssuerCount() external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Increment the total issuer count\n@dev Only the associated contract may call this.",
                "visibility": "external",
                "lineNumber": 81
            },
            {
                "name": "decrementTotalIssuerCount",
                "signature": "decrementTotalIssuerCount() external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Decrement the total issuer count\n@dev Only the associated contract may call this.",
                "visibility": "external",
                "lineNumber": 89
            },
            {
                "name": "appendDebtLedgerValue",
                "signature": "appendDebtLedgerValue(uint256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Append a value to the debt ledger\n@dev Only the associated contract may call this.\n@param value The new value to be added to the debt ledger.",
                "visibility": "external",
                "lineNumber": 98
            },
            {
                "name": "setPreferredCurrency",
                "signature": "setPreferredCurrency(address account, bytes4 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Set preferred currency for a user\n@dev Only the associated contract may call this.\n@param account The account to set the preferred currency for\n@param currencyKey The new preferred currency",
                "visibility": "external",
                "lineNumber": 108
            },
            {
                "name": "setIssuanceRatio",
                "signature": "setIssuanceRatio(uint256 _issuanceRatio) external",
                "returns": "()",
                "events": [
                    "IssuanceRatioUpdated"
                ],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": "@notice Set the issuanceRatio for issuance calculations.\n@dev Only callable by the contract owner.",
                "visibility": "external",
                "lineNumber": 116
            },
            {
                "name": "debtLedgerLength",
                "signature": "debtLedgerLength() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the length of the debt ledger array",
                "visibility": "external",
                "lineNumber": 150
            },
            {
                "name": "lastDebtLedgerEntry",
                "signature": "lastDebtLedgerEntry() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Retrieve the most recent entry from the debt ledger",
                "visibility": "external",
                "lineNumber": 157
            },
            {
                "name": "hasIssued",
                "signature": "hasIssued(address account) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": "@notice Query whether an account has issued and has an outstanding debt balance\n@param account The address to query for",
                "visibility": "external",
                "lineNumber": 165
            }
        ],
        "events": [
            {
                "name": "IssuanceRatioUpdated",
                "parameters": "(uint256 newRatio)",
                "lineNumber": 169
            }
        ],
        "variables": [
            {
                "name": "issuanceData",
                "type": "mapping(address => struct SynthetixState.IssuanceData)",
                "lineNumber": 30,
                "visibility": "public"
            },
            {
                "name": "totalIssuerCount",
                "type": "uint256",
                "lineNumber": 33,
                "visibility": "public"
            },
            {
                "name": "debtLedger",
                "type": "uint256[]",
                "lineNumber": 36,
                "visibility": "public"
            },
            {
                "name": "issuanceRatio",
                "type": "uint256",
                "lineNumber": 40,
                "visibility": "public"
            },
            {
                "name": "MAX_ISSUANCE_RATIO",
                "type": "uint256",
                "lineNumber": 42,
                "visibility": "public"
            },
            {
                "name": "preferredCurrency",
                "type": "mapping(address => bytes4)",
                "lineNumber": 46,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "IssuanceData",
                "members": [
                    {
                        "name": "initialDebtOwnership",
                        "type": "uint256"
                    },
                    {
                        "name": "debtEntryIndex",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 16
            }
        ]
    },
    "contracts/SystemStatus.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "SystemStatus"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 37
            },
            {
                "name": "requireSystemActive",
                "signature": "requireSystemActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 45
            },
            {
                "name": "requireIssuanceActive",
                "signature": "requireIssuanceActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 49
            },
            {
                "name": "requireExchangeActive",
                "signature": "requireExchangeActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 55
            },
            {
                "name": "requireSynthActive",
                "signature": "requireSynthActive(bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 61
            },
            {
                "name": "requireSynthsActive",
                "signature": "requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 67
            },
            {
                "name": "isSystemUpgrading",
                "signature": "isSystemUpgrading() external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 77
            },
            {
                "name": "getSynthSuspensions",
                "signature": "getSynthSuspensions(bytes32[] synths) external",
                "returns": "(bool[], uint256[])",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 81
            },
            {
                "name": "updateAccessControl",
                "signature": "updateAccessControl(bytes32 section, address account, bool canSuspend, bool canResume) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 96
            },
            {
                "name": "suspendSystem",
                "signature": "suspendSystem(uint256 reason) external",
                "returns": "()",
                "events": [
                    "SystemSuspended"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 105
            },
            {
                "name": "resumeSystem",
                "signature": "resumeSystem() external",
                "returns": "()",
                "events": [
                    "SystemResumed"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 112
            },
            {
                "name": "suspendIssuance",
                "signature": "suspendIssuance(uint256 reason) external",
                "returns": "()",
                "events": [
                    "IssuanceSuspended"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 119
            },
            {
                "name": "resumeIssuance",
                "signature": "resumeIssuance() external",
                "returns": "()",
                "events": [
                    "IssuanceResumed"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 126
            },
            {
                "name": "suspendExchange",
                "signature": "suspendExchange(uint256 reason) external",
                "returns": "()",
                "events": [
                    "ExchangeSuspended"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 133
            },
            {
                "name": "resumeExchange",
                "signature": "resumeExchange() external",
                "returns": "()",
                "events": [
                    "ExchangeResumed"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 140
            },
            {
                "name": "suspendSynth",
                "signature": "suspendSynth(bytes32 currencyKey, uint256 reason) external",
                "returns": "()",
                "events": [
                    "SynthSuspended"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 147
            },
            {
                "name": "resumeSynth",
                "signature": "resumeSynth(bytes32 currencyKey) external",
                "returns": "()",
                "events": [
                    "SynthResumed"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 154
            },
            {
                "name": "_requireAccessToSuspend",
                "signature": "_requireAccessToSuspend(bytes32 section) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 162
            },
            {
                "name": "_requireAccessToResume",
                "signature": "_requireAccessToResume(bytes32 section) internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 166
            },
            {
                "name": "_internalRequireSystemActive",
                "signature": "_internalRequireSystemActive() internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 170
            },
            {
                "name": "_internalUpdateAccessControl",
                "signature": "_internalUpdateAccessControl(bytes32 section, address account, bool canSuspend, bool canResume) internal",
                "returns": "()",
                "events": [
                    "AccessControlUpdated"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 179
            }
        ],
        "events": [
            {
                "name": "SystemSuspended",
                "parameters": "(uint256 reason)",
                "lineNumber": 199
            },
            {
                "name": "SystemResumed",
                "parameters": "(uint256 reason)",
                "lineNumber": 200
            },
            {
                "name": "IssuanceSuspended",
                "parameters": "(uint256 reason)",
                "lineNumber": 202
            },
            {
                "name": "IssuanceResumed",
                "parameters": "(uint256 reason)",
                "lineNumber": 203
            },
            {
                "name": "ExchangeSuspended",
                "parameters": "(uint256 reason)",
                "lineNumber": 205
            },
            {
                "name": "ExchangeResumed",
                "parameters": "(uint256 reason)",
                "lineNumber": 206
            },
            {
                "name": "SynthSuspended",
                "parameters": "(bytes32 currencyKey, uint256 reason)",
                "lineNumber": 208
            },
            {
                "name": "SynthResumed",
                "parameters": "(bytes32 currencyKey, uint256 reason)",
                "lineNumber": 209
            },
            {
                "name": "AccessControlUpdated",
                "parameters": "(bytes32 section, address account, bool canSuspend, bool canResume)",
                "lineNumber": 211
            }
        ],
        "variables": [
            {
                "name": "accessControl",
                "type": "mapping(bytes32 => mapping(address => struct SystemStatus.Status))",
                "lineNumber": 13,
                "visibility": "public"
            },
            {
                "name": "SUSPENSION_REASON_UPGRADE",
                "type": "uint248",
                "lineNumber": 22,
                "visibility": "public"
            },
            {
                "name": "SECTION_SYSTEM",
                "type": "bytes32",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "SECTION_ISSUANCE",
                "type": "bytes32",
                "lineNumber": 25,
                "visibility": "public"
            },
            {
                "name": "SECTION_EXCHANGE",
                "type": "bytes32",
                "lineNumber": 26,
                "visibility": "public"
            },
            {
                "name": "SECTION_SYNTH",
                "type": "bytes32",
                "lineNumber": 27,
                "visibility": "public"
            },
            {
                "name": "systemSuspension",
                "type": "struct SystemStatus.Suspension",
                "lineNumber": 29,
                "visibility": "public"
            },
            {
                "name": "issuanceSuspension",
                "type": "struct SystemStatus.Suspension",
                "lineNumber": 31,
                "visibility": "public"
            },
            {
                "name": "exchangeSuspension",
                "type": "struct SystemStatus.Suspension",
                "lineNumber": 33,
                "visibility": "public"
            },
            {
                "name": "synthSuspension",
                "type": "mapping(bytes32 => struct SystemStatus.Suspension)",
                "lineNumber": 35,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "Status",
                "members": [
                    {
                        "name": "canSuspend",
                        "type": "bool"
                    },
                    {
                        "name": "canResume",
                        "type": "bool"
                    }
                ],
                "lineNumber": 8
            },
            {
                "name": "Suspension",
                "members": [
                    {
                        "name": "suspended",
                        "type": "bool"
                    },
                    {
                        "name": "reason",
                        "type": "uint248"
                    }
                ],
                "lineNumber": 15
            }
        ]
    },
    "contracts/TokenState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "TokenState"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _associatedContract) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "State"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 13
            },
            {
                "name": "setAllowance",
                "signature": "setAllowance(address tokenOwner, address spender, uint256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Set ERC20 allowance.\n@dev Only the associated contract may call this.\n@param tokenOwner The authorising party.\n@param spender The authorised party.\n@param value The total value the authorised party may spend on the\nauthorising party's behalf.",
                "visibility": "external",
                "lineNumber": 25
            },
            {
                "name": "setBalanceOf",
                "signature": "setBalanceOf(address account, uint256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": "@notice Set the balance in a given account\n@dev Only the associated contract may call this.\n@param account The account whose value to set.\n@param value The new balance of the given account.",
                "visibility": "external",
                "lineNumber": 39
            }
        ],
        "variables": [
            {
                "name": "balanceOf",
                "type": "mapping(address => uint256)",
                "lineNumber": 10,
                "visibility": "public"
            },
            {
                "name": "allowance",
                "type": "mapping(address => mapping(address => uint256))",
                "lineNumber": 11,
                "visibility": "public"
            }
        ]
    },
    "contracts/interfaces/IDelegateApprovals.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IDelegateApprovals"
            }
        ],
        "functions": [
            {
                "name": "canBurnFor",
                "signature": "canBurnFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "canIssueFor",
                "signature": "canIssueFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "canClaimFor",
                "signature": "canClaimFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 9
            },
            {
                "name": "canExchangeFor",
                "signature": "canExchangeFor(address authoriser, address delegate) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 11
            }
        ]
    },
    "contracts/interfaces/IDepot.sol": {
        "metadata": [
            {
                "documentation": "@title Synthetix Depot interface",
                "contractName": "IDepot"
            }
        ],
        "functions": [
            {
                "name": "exchangeEtherForSynths",
                "signature": "exchangeEtherForSynths() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 8
            },
            {
                "name": "exchangeEtherForSynthsAtRate",
                "signature": "exchangeEtherForSynthsAtRate(uint256 guaranteedRate) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 10
            },
            {
                "name": "depositSynths",
                "signature": "depositSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 12
            },
            {
                "name": "withdrawMyDepositedSynths",
                "signature": "withdrawMyDepositedSynths() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 14
            },
            {
                "name": "exchangeEtherForSNX",
                "signature": "exchangeEtherForSNX() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            },
            {
                "name": "exchangeEtherForSNXAtRate",
                "signature": "exchangeEtherForSNXAtRate(uint256 guaranteedRate) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 19
            },
            {
                "name": "exchangeSynthsForSNX",
                "signature": "exchangeSynthsForSNX() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 21
            }
        ]
    },
    "contracts/interfaces/IERC20.sol": {
        "metadata": [
            {
                "documentation": "@title ERC20 interface\n@dev see https://github.com/ethereum/EIPs/issues/20",
                "contractName": "IERC20"
            }
        ],
        "functions": [
            {
                "name": "totalSupply",
                "signature": "totalSupply() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 9
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address owner) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 11
            },
            {
                "name": "allowance",
                "signature": "allowance(address owner, address spender) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 13
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 15
            },
            {
                "name": "approve",
                "signature": "approve(address spender, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 17
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 19
            },
            {
                "name": "name",
                "signature": "name() public",
                "returns": "(string)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 26
            },
            {
                "name": "symbol",
                "signature": "symbol() public",
                "returns": "(string)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 28
            },
            {
                "name": "decimals",
                "signature": "decimals() public",
                "returns": "(uint8)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 30
            }
        ],
        "events": [
            {
                "name": "Transfer",
                "parameters": "(address from, address to, uint256 value)",
                "lineNumber": 32
            },
            {
                "name": "Approval",
                "parameters": "(address owner, address spender, uint256 value)",
                "lineNumber": 34
            }
        ]
    },
    "contracts/interfaces/IEtherCollateral.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IEtherCollateral"
            }
        ],
        "variables": [
            {
                "name": "totalIssuedSynths",
                "type": "uint256",
                "lineNumber": 5,
                "visibility": "public"
            }
        ]
    },
    "contracts/interfaces/IExchangeRates.sol": {
        "metadata": [
            {
                "documentation": "@title ExchangeRates interface",
                "contractName": "IExchangeRates"
            }
        ],
        "functions": [
            {
                "name": "effectiveValue",
                "signature": "effectiveValue(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 8
            },
            {
                "name": "rateForCurrency",
                "signature": "rateForCurrency(bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 14
            },
            {
                "name": "ratesForCurrencies",
                "signature": "ratesForCurrencies(bytes32[] currencyKeys) external",
                "returns": "(uint256[])",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 16
            },
            {
                "name": "rateIsStale",
                "signature": "rateIsStale(bytes32 currencyKey) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 18
            },
            {
                "name": "rateIsFrozen",
                "signature": "rateIsFrozen(bytes32 currencyKey) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 20
            },
            {
                "name": "anyRateIsStale",
                "signature": "anyRateIsStale(bytes32[] currencyKeys) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 22
            },
            {
                "name": "getCurrentRoundId",
                "signature": "getCurrentRoundId(bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 24
            },
            {
                "name": "effectiveValueAtRound",
                "signature": "effectiveValueAtRound(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, uint256 roundIdForSrc, uint256 roundIdForDest) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 26
            },
            {
                "name": "getLastRoundIdBeforeElapsedSecs",
                "signature": "getLastRoundIdBeforeElapsedSecs(bytes32 currencyKey, uint256 startingRoundId, uint256 startingTimestamp, uint256 timediff) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 34
            },
            {
                "name": "ratesAndStaleForCurrencies",
                "signature": "ratesAndStaleForCurrencies(bytes32[] currencyKeys) external",
                "returns": "(uint256[], bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 41
            },
            {
                "name": "rateAndTimestampAtRound",
                "signature": "rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId) external",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 43
            }
        ]
    },
    "contracts/interfaces/IExchangeState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IExchangeState"
            }
        ],
        "functions": [
            {
                "name": "appendExchangeEntry",
                "signature": "appendExchangeEntry(address account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "removeEntries",
                "signature": "removeEntries(address account, bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            },
            {
                "name": "getLengthOfEntries",
                "signature": "getLengthOfEntries(address account, bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 19
            },
            {
                "name": "getEntryAt",
                "signature": "getEntryAt(address account, bytes32 currencyKey, uint256 index) external",
                "returns": "(bytes32, uint256, bytes32, uint256, uint256, uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 21
            },
            {
                "name": "getMaxTimestamp",
                "signature": "getMaxTimestamp(address account, bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 39
            }
        ]
    },
    "contracts/interfaces/IExchanger.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IExchanger"
            }
        ],
        "functions": [
            {
                "name": "maxSecsLeftInWaitingPeriod",
                "signature": "maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "feeRateForExchange",
                "signature": "feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "settlementOwing",
                "signature": "settlementOwing(address account, bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 9
            },
            {
                "name": "settle",
                "signature": "settle(address from, bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 18
            },
            {
                "name": "exchange",
                "signature": "exchange(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 26
            },
            {
                "name": "exchangeOnBehalf",
                "signature": "exchangeOnBehalf(address exchangeForAddress, address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 34
            },
            {
                "name": "calculateAmountAfterSettlement",
                "signature": "calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint256 amount, uint256 refunded) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 42
            }
        ]
    },
    "contracts/interfaces/IFeePool.sol": {
        "metadata": [
            {
                "documentation": "@title FeePool Interface\n@notice Abstract contract to hold public getters",
                "contractName": "IFeePool"
            }
        ],
        "functions": [
            {
                "name": "amountReceivedFromExchange",
                "signature": "amountReceivedFromExchange(uint256 value) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 12
            },
            {
                "name": "amountReceivedFromTransfer",
                "signature": "amountReceivedFromTransfer(uint256 value) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 14
            },
            {
                "name": "recordFeePaid",
                "signature": "recordFeePaid(uint256 sUSDAmount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 16
            },
            {
                "name": "appendAccountIssuanceRecord",
                "signature": "appendAccountIssuanceRecord(address account, uint256 lockedAmount, uint256 debtEntryIndex) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 18
            },
            {
                "name": "setRewardsToDistribute",
                "signature": "setRewardsToDistribute(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 24
            }
        ],
        "variables": [
            {
                "name": "FEE_ADDRESS",
                "type": "address",
                "lineNumber": 9,
                "visibility": "public"
            },
            {
                "name": "exchangeFeeRate",
                "type": "uint256",
                "lineNumber": 10,
                "visibility": "public"
            }
        ]
    },
    "contracts/interfaces/IIssuer.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "IIssuer"
            }
        ],
        "functions": [
            {
                "name": "issueSynths",
                "signature": "issueSynths(address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "issueSynthsOnBehalf",
                "signature": "issueSynthsOnBehalf(address issueFor, address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "issueMaxSynths",
                "signature": "issueMaxSynths(address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 13
            },
            {
                "name": "issueMaxSynthsOnBehalf",
                "signature": "issueMaxSynthsOnBehalf(address issueFor, address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 15
            },
            {
                "name": "burnSynths",
                "signature": "burnSynths(address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            },
            {
                "name": "burnSynthsOnBehalf",
                "signature": "burnSynthsOnBehalf(address burnForAddress, address from, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 19
            },
            {
                "name": "burnSynthsToTarget",
                "signature": "burnSynthsToTarget(address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 25
            },
            {
                "name": "burnSynthsToTargetOnBehalf",
                "signature": "burnSynthsToTargetOnBehalf(address burnForAddress, address from) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 27
            },
            {
                "name": "canBurnSynths",
                "signature": "canBurnSynths(address account) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 29
            },
            {
                "name": "lastIssueEvent",
                "signature": "lastIssueEvent(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 31
            }
        ]
    },
    "contracts/interfaces/IRewardsDistribution.sol": {
        "metadata": [
            {
                "documentation": "@title RewardsDistribution interface",
                "contractName": "IRewardsDistribution"
            }
        ],
        "functions": [
            {
                "name": "distributeRewards",
                "signature": "distributeRewards(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 8
            }
        ]
    },
    "contracts/interfaces/ISynth.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ISynth"
            }
        ],
        "functions": [
            {
                "name": "burn",
                "signature": "burn(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "issue",
                "signature": "issue(address account, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 9
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 11
            },
            {
                "name": "transferFromAndSettle",
                "signature": "transferFromAndSettle(address from, address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            },
            {
                "name": "balanceOf",
                "signature": "balanceOf(address owner) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 23
            }
        ]
    },
    "contracts/interfaces/ISynthetix.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ISynthetix"
            }
        ],
        "functions": [
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 27
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 29
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 31
            },
            {
                "name": "exchange",
                "signature": "exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 37
            },
            {
                "name": "issueSynths",
                "signature": "issueSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 43
            },
            {
                "name": "issueMaxSynths",
                "signature": "issueMaxSynths() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 45
            },
            {
                "name": "burnSynths",
                "signature": "burnSynths(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 47
            },
            {
                "name": "burnSynthsToTarget",
                "signature": "burnSynthsToTarget() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 49
            },
            {
                "name": "settle",
                "signature": "settle(bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 51
            },
            {
                "name": "collateralisationRatio",
                "signature": "collateralisationRatio(address issuer) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 59
            },
            {
                "name": "totalIssuedSynths",
                "signature": "totalIssuedSynths(bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 61
            },
            {
                "name": "totalIssuedSynthsExcludeEtherCollateral",
                "signature": "totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 63
            },
            {
                "name": "debtBalanceOf",
                "signature": "debtBalanceOf(address issuer, bytes32 currencyKey) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 65
            },
            {
                "name": "debtBalanceOfAndTotalDebt",
                "signature": "debtBalanceOfAndTotalDebt(address issuer, bytes32 currencyKey) public",
                "returns": "(uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 67
            },
            {
                "name": "remainingIssuableSynths",
                "signature": "remainingIssuableSynths(address issuer) public",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 72
            },
            {
                "name": "maxIssuableSynths",
                "signature": "maxIssuableSynths(address issuer) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 81
            },
            {
                "name": "isWaitingPeriod",
                "signature": "isWaitingPeriod(bytes32 currencyKey) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 83
            },
            {
                "name": "emitSynthExchange",
                "signature": "emitSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 85
            },
            {
                "name": "emitExchangeReclaim",
                "signature": "emitExchangeReclaim(address account, bytes32 currencyKey, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 94
            },
            {
                "name": "emitExchangeRebate",
                "signature": "emitExchangeRebate(address account, bytes32 currencyKey, uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 100
            }
        ],
        "variables": [
            {
                "name": "totalSupply",
                "type": "uint256",
                "lineNumber": 19,
                "visibility": "public"
            },
            {
                "name": "synths",
                "type": "mapping(bytes32 => contract Synth)",
                "lineNumber": 21,
                "visibility": "public"
            },
            {
                "name": "synthsByAddress",
                "type": "mapping(address => bytes32)",
                "lineNumber": 23,
                "visibility": "public"
            }
        ]
    },
    "contracts/interfaces/ISynthetixEscrow.sol": {
        "metadata": [
            {
                "documentation": "@title SynthetixEscrow interface",
                "contractName": "ISynthetixEscrow"
            }
        ],
        "functions": [
            {
                "name": "balanceOf",
                "signature": "balanceOf(address account) external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 8
            },
            {
                "name": "appendVestingEntry",
                "signature": "appendVestingEntry(address account, uint256 quantity) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 10
            }
        ]
    },
    "contracts/interfaces/ISynthetixState.sol": {
        "metadata": [
            {
                "documentation": "@title SynthetixState interface contract\n@notice Abstract contract to hold public getters",
                "contractName": "ISynthetixState"
            }
        ],
        "functions": [
            {
                "name": "debtLedgerLength",
                "signature": "debtLedgerLength() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 27
            },
            {
                "name": "hasIssued",
                "signature": "hasIssued(address account) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 29
            },
            {
                "name": "incrementTotalIssuerCount",
                "signature": "incrementTotalIssuerCount() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 31
            },
            {
                "name": "decrementTotalIssuerCount",
                "signature": "decrementTotalIssuerCount() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 33
            },
            {
                "name": "setCurrentIssuanceData",
                "signature": "setCurrentIssuanceData(address account, uint256 initialDebtOwnership) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 35
            },
            {
                "name": "lastDebtLedgerEntry",
                "signature": "lastDebtLedgerEntry() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 37
            },
            {
                "name": "appendDebtLedgerValue",
                "signature": "appendDebtLedgerValue(uint256 value) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 39
            },
            {
                "name": "clearIssuanceData",
                "signature": "clearIssuanceData(address account) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 41
            }
        ],
        "variables": [
            {
                "name": "debtLedger",
                "type": "uint256[]",
                "lineNumber": 23,
                "visibility": "public"
            },
            {
                "name": "issuanceRatio",
                "type": "uint256",
                "lineNumber": 24,
                "visibility": "public"
            },
            {
                "name": "issuanceData",
                "type": "mapping(address => struct ISynthetixState.IssuanceData)",
                "lineNumber": 25,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "IssuanceData",
                "members": [
                    {
                        "name": "initialDebtOwnership",
                        "type": "uint256"
                    },
                    {
                        "name": "debtEntryIndex",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 10
            }
        ]
    },
    "contracts/interfaces/ISystemStatus.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "ISystemStatus"
            }
        ],
        "functions": [
            {
                "name": "requireSystemActive",
                "signature": "requireSystemActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 5
            },
            {
                "name": "requireIssuanceActive",
                "signature": "requireIssuanceActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 7
            },
            {
                "name": "requireExchangeActive",
                "signature": "requireExchangeActive() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 9
            },
            {
                "name": "requireSynthActive",
                "signature": "requireSynthActive(bytes32 currencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 11
            },
            {
                "name": "requireSynthsActive",
                "signature": "requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 13
            }
        ]
    },
    "contracts/test-helpers/GenericMock.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "GenericMock"
            }
        ],
        "functions": [
            {
                "name": "fallback",
                "signature": "() external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 10
            },
            {
                "name": "mockReturns",
                "signature": "mockReturns(bytes4 key, bytes value) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 17
            }
        ],
        "variables": [
            {
                "name": "mockConfig",
                "type": "mapping(bytes4 => bytes)",
                "lineNumber": 7,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/MockAggregator.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "AggregatorInterface"
            },
            {
                "documentation": null,
                "contractName": "MockAggregator"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "() public",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 30
            },
            {
                "name": "setLatestAnswer",
                "signature": "setLatestAnswer(int256 answer, uint256 timestamp) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 33
            },
            {
                "name": "latestAnswer",
                "signature": "latestAnswer() external",
                "returns": "(int256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 38
            },
            {
                "name": "latestTimestamp",
                "signature": "latestTimestamp() external",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 42
            },
            {
                "name": "latestRound",
                "signature": "latestRound() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 46
            },
            {
                "name": "getAnswer",
                "signature": "getAnswer(uint256 _roundId) public",
                "returns": "(int256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 50
            },
            {
                "name": "getTimestamp",
                "signature": "getTimestamp(uint256 _roundId) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 54
            }
        ],
        "variables": [
            {
                "name": "roundId",
                "type": "uint256",
                "lineNumber": 21,
                "visibility": "public"
            },
            {
                "name": "entries",
                "type": "mapping(uint256 => struct MockAggregator.Entry)",
                "lineNumber": 28,
                "visibility": "public"
            }
        ],
        "structs": [
            {
                "name": "Entry",
                "members": [
                    {
                        "name": "answer",
                        "type": "int256"
                    },
                    {
                        "name": "timestamp",
                        "type": "uint256"
                    }
                ],
                "lineNumber": 23
            }
        ]
    },
    "contracts/test-helpers/MockEtherCollateral.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MockEtherCollateral"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "() public",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 12
            },
            {
                "name": "openLoan",
                "signature": "openLoan(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 15
            },
            {
                "name": "closeLoan",
                "signature": "closeLoan(uint256 amount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 20
            }
        ],
        "variables": [
            {
                "name": "totalIssuedSynths",
                "type": "uint256",
                "lineNumber": 10,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/MockExchanger.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MockExchanger"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(contract ISynthetix _synthetix) public",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 14
            },
            {
                "name": "settle",
                "signature": "settle(address from, bytes32 currencyKey) external",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 19
            },
            {
                "name": "maxSecsLeftInWaitingPeriod",
                "signature": "maxSecsLeftInWaitingPeriod(address , bytes32 ) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 41
            },
            {
                "name": "settlementOwing",
                "signature": "settlementOwing(address , bytes32 ) public",
                "returns": "(uint256, uint256, uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 49
            },
            {
                "name": "setReclaim",
                "signature": "setReclaim(uint256 _reclaimAmount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 64
            },
            {
                "name": "setRefund",
                "signature": "setRefund(uint256 _refundAmount) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 68
            },
            {
                "name": "setNumEntries",
                "signature": "setNumEntries(uint256 _numEntries) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 72
            },
            {
                "name": "setMaxSecsLeft",
                "signature": "setMaxSecsLeft(uint256 _maxSecsLeft) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 76
            }
        ],
        "variables": [
            {
                "name": "_mockReclaimAmount",
                "type": "uint256",
                "lineNumber": 7,
                "visibility": "private"
            },
            {
                "name": "_mockRefundAmount",
                "type": "uint256",
                "lineNumber": 8,
                "visibility": "private"
            },
            {
                "name": "_mockNumEntries",
                "type": "uint256",
                "lineNumber": 9,
                "visibility": "private"
            },
            {
                "name": "_mockMaxSecsLeft",
                "type": "uint256",
                "lineNumber": 10,
                "visibility": "private"
            },
            {
                "name": "synthetix",
                "type": "contract ISynthetix",
                "lineNumber": 12,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/MockRewardsRecipient.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MockRewardsRecipient"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 10
            },
            {
                "name": "notifyRewardAmount",
                "signature": "notifyRewardAmount(uint256 reward) external",
                "returns": "()",
                "events": [
                    "RewardAdded"
                ],
                "modifiers": [
                    "onlyRewardsDistribution"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 12
            }
        ],
        "events": [
            {
                "name": "RewardAdded",
                "parameters": "(uint256 amount)",
                "lineNumber": 17
            }
        ],
        "variables": [
            {
                "name": "rewardsAvailable",
                "type": "uint256",
                "lineNumber": 8,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/MockSynth.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "MockSynth"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _name, string _symbol, uint256 _totalSupply, address _owner, bytes32 _currencyKey) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "ExternStateToken"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 13
            },
            {
                "name": "setSystemStatus",
                "signature": "setSystemStatus(contract ISystemStatus _status) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 26
            },
            {
                "name": "setTotalSupply",
                "signature": "setTotalSupply(uint256 _totalSupply) external",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 31
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 35
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 41
            },
            {
                "name": "issue",
                "signature": "issue(address account, uint256 amount) external",
                "returns": "()",
                "events": [
                    "Issued"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 56
            },
            {
                "name": "burn",
                "signature": "burn(address account, uint256 amount) external",
                "returns": "()",
                "events": [
                    "Burned"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 62
            }
        ],
        "events": [
            {
                "name": "Issued",
                "parameters": "(address account, uint256 value)",
                "lineNumber": 51
            },
            {
                "name": "Burned",
                "parameters": "(address account, uint256 value)",
                "lineNumber": 53
            }
        ],
        "variables": [
            {
                "name": "systemStatus",
                "type": "contract ISystemStatus",
                "lineNumber": 10,
                "visibility": "private"
            },
            {
                "name": "currencyKey",
                "type": "bytes32",
                "lineNumber": 11,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/OneWeekSetup.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "OneWeekSetup"
            }
        ],
        "functions": [
            {
                "name": "testFunc",
                "signature": "testFunc() public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "onlyDuringSetup"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 7
            },
            {
                "name": "publicSetupExpiryTime",
                "signature": "publicSetupExpiryTime() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 11
            }
        ]
    },
    "contracts/test-helpers/PublicEST.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "PublicEST"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address payable _proxy, contract TokenState _tokenState, string _name, string _symbol, uint256 _totalSupply, address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "ExternStateToken"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 9
            },
            {
                "name": "transfer",
                "signature": "transfer(address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 18
            },
            {
                "name": "transferFrom",
                "signature": "transferFrom(address from, address to, uint256 value) external",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "optionalProxy"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 22
            },
            {
                "name": "somethingToBeProxied",
                "signature": "somethingToBeProxied(uint256 inputA, bytes32 inputB) external",
                "returns": "()",
                "events": [
                    "Received"
                ],
                "modifiers": [],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 33
            }
        ],
        "events": [
            {
                "name": "Received",
                "parameters": "(address sender, uint256 inputA, bytes32 inputB)",
                "lineNumber": 31
            }
        ],
        "variables": [
            {
                "name": "DECIMALS",
                "type": "uint8",
                "lineNumber": 7,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/PublicMath.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "PublicMath"
            }
        ],
        "functions": [
            {
                "name": "powerDecimal",
                "signature": "powerDecimal(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 12
            }
        ]
    },
    "contracts/test-helpers/PublicSafeDecimalMath.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "PublicSafeDecimalMath"
            }
        ],
        "functions": [
            {
                "name": "unit",
                "signature": "unit() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 12
            },
            {
                "name": "preciseUnit",
                "signature": "preciseUnit() public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 16
            },
            {
                "name": "multiplyDecimal",
                "signature": "multiplyDecimal(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 20
            },
            {
                "name": "multiplyDecimalRound",
                "signature": "multiplyDecimalRound(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 24
            },
            {
                "name": "multiplyDecimalRoundPrecise",
                "signature": "multiplyDecimalRoundPrecise(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 28
            },
            {
                "name": "divideDecimal",
                "signature": "divideDecimal(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 32
            },
            {
                "name": "divideDecimalRound",
                "signature": "divideDecimalRound(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 36
            },
            {
                "name": "divideDecimalRoundPrecise",
                "signature": "divideDecimalRoundPrecise(uint256 x, uint256 y) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 40
            },
            {
                "name": "decimalToPreciseDecimal",
                "signature": "decimalToPreciseDecimal(uint256 i) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 44
            },
            {
                "name": "preciseDecimalToDecimal",
                "signature": "preciseDecimalToDecimal(uint256 i) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 48
            }
        ]
    },
    "contracts/test-helpers/TestableMixinResolver.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "TestableMixinResolver"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _resolver) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "MixinResolver"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 14
            }
        ],
        "variables": [
            {
                "name": "CONTRACT_EXAMPLE_1",
                "type": "bytes32",
                "lineNumber": 8,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXAMPLE_2",
                "type": "bytes32",
                "lineNumber": 9,
                "visibility": "private"
            },
            {
                "name": "CONTRACT_EXAMPLE_3",
                "type": "bytes32",
                "lineNumber": 10,
                "visibility": "private"
            },
            {
                "name": "addressesToCache",
                "type": "bytes32[24]",
                "lineNumber": 12,
                "visibility": "private"
            }
        ]
    },
    "contracts/test-helpers/TestablePausable.sol": {
        "metadata": [
            {
                "documentation": "@title An implementation of Pausable. Used to test the features of the Pausable contract that can only be tested by an implementation.",
                "contractName": "TestablePausable"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "Pausable"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 13
            },
            {
                "name": "setSomeValue",
                "signature": "setSomeValue(uint256 _value) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "notPaused"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 15
            }
        ],
        "variables": [
            {
                "name": "someValue",
                "type": "uint256",
                "lineNumber": 11,
                "visibility": "public"
            }
        ]
    },
    "contracts/test-helpers/TestableSelfDestructible.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "TestableSelfDestructible"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "SelfDestructible"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 8
            }
        ]
    },
    "contracts/test-helpers/TestableState.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "TestableState"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _associatedContract) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned",
                    "State"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 8
            },
            {
                "name": "testModifier",
                "signature": "testModifier() external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyAssociatedContract"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 10
            }
        ]
    },
    "contracts/test-helpers/TokenExchanger.sol": {
        "metadata": [
            {
                "documentation": null,
                "contractName": "TokenExchanger"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "(address _owner, address _integrationProxy) public",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "Owned"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 16
            },
            {
                "name": "setSynthetixProxy",
                "signature": "setSynthetixProxy(address _integrationProxy) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 20
            },
            {
                "name": "setSynthetix",
                "signature": "setSynthetix(address _synthetix) external",
                "returns": "()",
                "events": [],
                "modifiers": [
                    "onlyOwner"
                ],
                "documentation": null,
                "visibility": "external",
                "lineNumber": 24
            },
            {
                "name": "checkBalance",
                "signature": "checkBalance(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "synthetixProxyIsSet"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 28
            },
            {
                "name": "checkAllowance",
                "signature": "checkAllowance(address tokenOwner, address spender) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "synthetixProxyIsSet"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 32
            },
            {
                "name": "checkBalanceSNXDirect",
                "signature": "checkBalanceSNXDirect(address account) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [
                    "synthetixProxyIsSet"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 36
            },
            {
                "name": "getDecimals",
                "signature": "getDecimals(address tokenAddress) public",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 40
            },
            {
                "name": "doTokenSpend",
                "signature": "doTokenSpend(address fromAccount, address toAccount, uint256 amount) public",
                "returns": "(bool)",
                "events": [],
                "modifiers": [
                    "synthetixProxyIsSet"
                ],
                "documentation": null,
                "visibility": "public",
                "lineNumber": 44
            }
        ],
        "events": [
            {
                "name": "LogString",
                "parameters": "(string name, string value)",
                "lineNumber": 67
            },
            {
                "name": "LogInt",
                "parameters": "(string name, uint256 value)",
                "lineNumber": 68
            },
            {
                "name": "LogAddress",
                "parameters": "(string name, address value)",
                "lineNumber": 69
            },
            {
                "name": "LogBytes",
                "parameters": "(string name, bytes4 value)",
                "lineNumber": 70
            }
        ],
        "variables": [
            {
                "name": "integrationProxy",
                "type": "address",
                "lineNumber": 13,
                "visibility": "public"
            },
            {
                "name": "synthetix",
                "type": "address",
                "lineNumber": 14,
                "visibility": "public"
            }
        ],
        "modifiers": [
            {
                "name": "synthetixProxyIsSet",
                "parameters": "()",
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 62
            }
        ]
    },
    "openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol": {
        "metadata": [
            {
                "documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
                "contractName": "SafeMath"
            }
        ],
        "functions": [
            {
                "name": "add",
                "signature": "add(uint256 a, uint256 b) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.",
                "visibility": "internal",
                "lineNumber": 26
            },
            {
                "name": "sub",
                "signature": "sub(uint256 a, uint256 b) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.",
                "visibility": "internal",
                "lineNumber": 42
            },
            {
                "name": "mul",
                "signature": "mul(uint256 a, uint256 b) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.",
                "visibility": "internal",
                "lineNumber": 58
            },
            {
                "name": "div",
                "signature": "div(uint256 a, uint256 b) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
                "visibility": "internal",
                "lineNumber": 83
            },
            {
                "name": "mod",
                "signature": "mod(uint256 a, uint256 b) internal",
                "returns": "(uint256)",
                "events": [],
                "modifiers": [],
                "documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.",
                "visibility": "internal",
                "lineNumber": 103
            }
        ]
    },
    "openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol": {
        "metadata": [
            {
                "documentation": "@dev Contract module that helps prevent reentrant calls to a function.\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\navailable, which can be aplied to functions to make sure there are no nested\n(reentrant) calls to them.\n * Note that because there is a single `nonReentrant` guard, functions marked as\n`nonReentrant` may not call one another. This can be worked around by making\nthose functions `private`, and then adding `external` `nonReentrant` entry\npoints to them.",
                "contractName": "ReentrancyGuard"
            }
        ],
        "functions": [
            {
                "name": "constructor",
                "signature": "() internal",
                "returns": "()",
                "events": [],
                "modifiers": [],
                "documentation": null,
                "visibility": "internal",
                "lineNumber": 19
            }
        ],
        "variables": [
            {
                "name": "_guardCounter",
                "type": "uint256",
                "lineNumber": 17,
                "visibility": "private"
            }
        ],
        "modifiers": [
            {
                "name": "nonReentrant",
                "parameters": "()",
                "documentation": "@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",
                "visibility": "internal",
                "lineNumber": 32
            }
        ]
    }
}